{
  "openapi": "3.0.2",
  "info": {
    "title": "Spacebring",
    "version": "1.0.0",
    "termsOfService": "https://www.spacebring.com/terms"
  },
  "servers": [
    {
      "url": "https://api.spacebring.com"
    }
  ],
  "paths": {
    "/benefits/applications/v1": {
      "get": {
        "tags": [
          "Benefit applications"
        ],
        "summary": "Retrieve benefit applications",
        "description": "Retrieve all benefit applications in the location or for certain benefit. <h3>OAuth</h3>Required scopes: <code>benefits.readonly</code> or <code>benefits</code>",
        "operationId": "getBenefitApplications",
        "parameters": [
          {
            "in": "query",
            "name": "locationRef",
            "description": "The id of the location",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "benefitRef",
            "description": "The id of the benefit",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 100,
              "default": 25
            },
            "description": "The number of items to return"
          },
          {
            "in": "query",
            "name": "nextPageToken",
            "schema": {
              "type": "string"
            },
            "description": "nextPageToken retrieved from a previous request",
            "required": false
          },
          {
            "in": "query",
            "name": "categoryRef",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "The ids of the categories to filter by",
            "required": false
          },
          {
            "name": "userRef",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "benefits.readonly",
              "benefits"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "applications": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/benefitApplication"
                      }
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Benefit applications"
        ],
        "summary": "Apply for a benefit",
        "description": "Apply for a benefit. <h3>OAuth</h3>Required scopes: <code>benefits</code>",
        "operationId": "applyBenefit",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "benefits"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/applyBenefit"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "application": {
                      "$ref": "#/components/schemas/benefitApplication"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/benefits/applications/v1/{id}": {
      "get": {
        "tags": [
          "Benefit applications"
        ],
        "summary": "Retrieve a benefit application",
        "description": "Retrieve a benefit application by id. <h3>OAuth</h3>Required scopes: <code>benefits.readonly</code> or <code>benefits</code>",
        "operationId": "getBenefitApplication",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The id of the benefit application",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "benefits.readonly",
              "benefits"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "application": {
                      "type": "object",
                      "$ref": "#/components/schemas/benefitApplication"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/benefits/categories/v1": {
      "get": {
        "tags": [
          "Benefit categories"
        ],
        "summary": "Retrieve benefit categories",
        "description": "Retrieve all benefit categories in the location. <h3>OAuth</h3>Required scopes: <code>benefits.readonly</code> or <code>benefits</code>",
        "operationId": "getBenefitCategories",
        "parameters": [
          {
            "in": "query",
            "name": "locationRef",
            "description": "The id of the location",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "benefits.readonly",
              "benefits"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "categories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/benefitCategory"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Benefit categories"
        ],
        "summary": "Create a benefit category",
        "description": "Create a benefit category. <h3>OAuth</h3>Required scopes: <code>benefits</code>",
        "operationId": "createBenefitCategory",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createBenefitCategory"
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "benefits"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "category": {
                      "$ref": "#/components/schemas/benefitCategory"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/benefits/categories/v1/{id}": {
      "get": {
        "tags": [
          "Benefit Categories"
        ],
        "summary": "Get a benefit category",
        "description": "Get a benefit category. <h3>OAuth</h3>Required scopes: <code>benefits</code>",
        "operationId": "getBenefitCategory",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The id of the benefit category",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "benefits",
              "benefits.readonly"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "category": {
                      "$ref": "#/components/schemas/benefitCategory"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Benefit Categories"
        ],
        "summary": "Delete a benefit category",
        "description": "Delete a benefit category. <h3>OAuth</h3>Required scopes: <code>benefits</code>",
        "operationId": "deleteBenefitCategory",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The id of the benefit category",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "benefits"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Benefit Categories"
        ],
        "summary": "Update a benefit category",
        "description": "Update a benefit category. <h3>OAuth</h3>Required scopes: <code>benefits</code>",
        "operationId": "updateBenefitCategory",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The id of the benefit category",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/updateBenefitCategory"
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "benefits"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "category": {
                      "$ref": "#/components/schemas/benefitCategory"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/benefits/v1": {
      "get": {
        "tags": [
          "Benefits"
        ],
        "summary": "Retrieve benefits",
        "description": "Retrieve all benefits in the location. <h3>OAuth</h3>Required scopes: <code>benefits.readonly</code> or <code>benefits</code>",
        "operationId": "getBenefits",
        "parameters": [
          {
            "name": "locationRef",
            "in": "query",
            "description": "The id of the location",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "benefits.readonly",
              "benefits"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "benefits": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/benefit"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Benefits"
        ],
        "summary": "Create a benefit",
        "description": "Create a benefit. <h3>OAuth</h3>Required scopes: <code>benefits</code>",
        "operationId": "createBenefit",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "benefits.create"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createBenefit"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/benefit"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/benefits/v1/{id}": {
      "get": {
        "tags": [
          "Benefits"
        ],
        "summary": "Retrieve a benefit",
        "description": "Retrieve a benefit. <h3>OAuth</h3>Required scopes: <code>benefits.readonly</code> or <code>benefits</code>",
        "operationId": "getBenefit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the benefit",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "benefits.readonly",
              "benefits"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "benefit": {
                      "$ref": "#/components/schemas/benefit"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Benefits"
        ],
        "summary": "Delete a benefit",
        "description": "Delete a benefit. <h3>OAuth</h3>Required scopes: <code>benefits</code>",
        "operationId": "deleteBenefit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the benefit",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "benefits"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Benefits"
        ],
        "summary": "Update a benefit",
        "description": "Update a benefit. <h3>OAuth</h3>Required scopes: <code>benefits</code>",
        "operationId": "updateBenefit",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The id of the benefit",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "benefits"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/updateBenefit"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "benefit": {
                      "$ref": "#/components/schemas/benefit"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/resources/bookings/v1": {
      "get": {
        "tags": [
          "Bookings"
        ],
        "summary": "Retrieve bookings",
        "description": "Retrieve all bookings of resources. <h3>OAuth</h3>Required scopes: <code>resources.readonly</code> or <code>resources</code>",
        "operationId": "getBookings",
        "parameters": [
          {
            "in": "query",
            "name": "resourceRef",
            "description": "The id of the resource. Required if `locationRef` is not passed.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "locationRef",
            "description": "The id of the location. Required if `resourceRef` is not passed.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "membershipRefOwner",
            "description": "The id of the membership owner.",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "endDate",
            "description": "The date filter of items.",
            "schema": {
              "type": "object",
              "properties": {
                "lte": {
                  "format": "date-time",
                  "type": "string",
                  "description": "Get bookings with less or equal end date. Example: endDate[lte]=2021-05-21T10:00:00Z"
                },
                "gte": {
                  "format": "date-time",
                  "type": "string",
                  "description": "Get bookings with greater or equal end date. Example: endDate[gte]=2021-05-21T10:00:00Z"
                },
                "lt": {
                  "format": "date-time",
                  "type": "string",
                  "description": "Get bookings with less end date. Example: endDate[lt]=2021-05-21T10:00:00Z"
                },
                "gt": {
                  "format": "date-time",
                  "type": "string",
                  "description": "Get bookings with greater end date. Example: endDate[gt]=2021-05-21T10:00:00Z"
                }
              }
            }
          },
          {
            "in": "query",
            "name": "startDate",
            "description": "The date filter of items.",
            "schema": {
              "type": "object",
              "properties": {
                "lte": {
                  "format": "date-time",
                  "type": "string",
                  "description": "Get bookings with less or equal start date. Example: startDate[lte]=2021-05-21T10:00:00Z"
                },
                "gte": {
                  "format": "date-time",
                  "type": "string",
                  "description": "Get bookings with greater or equal start date. Example: startDate[gte]=2021-05-21T10:00:00Z"
                },
                "lt": {
                  "format": "date-time",
                  "type": "string",
                  "description": "Get bookings with less start date. Example: startDate[lt]=2021-05-21T10:00:00Z"
                },
                "gt": {
                  "format": "date-time",
                  "type": "string",
                  "description": "Get bookings with greater start date. Example: startDate[gt]=2021-05-21T10:00:00Z"
                }
              }
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 100,
              "default": 25
            },
            "description": "The number of items to return"
          },
          {
            "in": "query",
            "name": "order",
            "description": "The order of filtered items. Format - `field:order`. Possible field values are `createDate`, `endDate`, `startDate`, `id`. Order values - `asc`, `desc`.",
            "schema": {
              "type": "string",
              "default": "endDate:asc"
            }
          },
          {
            "in": "query",
            "name": "nextPageToken",
            "schema": {
              "type": "string"
            },
            "description": "nextPageToken retrieved from a previous request"
          },
          {
            "in": "query",
            "name": "types",
            "description": "The types of resources to retrieve bookings for. Pass them as comma separated values.",
            "schema": {
              "type": "string",
              "enum": [
                "hotDesk",
                "dedicatedDesk",
                "office",
                "parkingLot",
                "room"
              ]
            }
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "resources.readonly",
              "resources"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "bookings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/booking"
                      }
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Bookings"
        ],
        "summary": "Create booking",
        "description": "Create a booking. <h3>OAuth</h3>Required scopes: <code>resources</code>",
        "operationId": "createBooking",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createBooking"
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "resources"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "booking": {
                      "$ref": "#/components/schemas/booking"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/resources/bookings/v1/{id}": {
      "get": {
        "tags": [
          "Bookings"
        ],
        "summary": "Get booking",
        "description": "Get a booking. <h3>OAuth</h3>Required scopes: <code>resources.readonly</code> or <code>resources</code>",
        "operationId": "getBooking",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the booking.",
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "resources.readonly",
              "resources"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "booking": {
                      "$ref": "#/components/schemas/booking"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Bookings"
        ],
        "summary": "Delete booking",
        "description": "Delete a booking. <h3>OAuth</h3>Required scopes: <code>resources</code>",
        "operationId": "deleteBooking",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the booking.",
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "resources"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/community/companies/v1": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Retrieve companies",
        "description": "Retrieve all companies. <h3>OAuth</h3>Required scopes: <code>community.readonly</code> or <code>community</code>",
        "operationId": "getCompanies",
        "parameters": [
          {
            "name": "locationRef",
            "in": "query",
            "description": "The id of the location.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 100,
              "default": 25
            },
            "description": "The number of items to return"
          },
          {
            "in": "query",
            "name": "nextPageToken",
            "schema": {
              "type": "string"
            },
            "description": "nextPageToken retrieved from a previous request"
          },
          {
            "name": "title",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter by company's title"
          },
          {
            "in": "query",
            "name": "types",
            "schema": {
              "type": "string",
              "enum": [
                "member",
                "nonmember"
              ]
            },
            "description": "Filter by types. Pass them as comma separated values."
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "community.readonly",
              "community"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "companies": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/company"
                      }
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Companies"
        ],
        "summary": "Create a company",
        "description": "Create a company. <h3>OAuth</h3>Required scopes: <code>community</code>",
        "operationId": "createCompany",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createCompany"
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "community"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "company": {
                      "$ref": "#/components/schemas/company"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/community/companies/v1/{id}": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Retrieve a company",
        "description": "Retrieve a certain company. <h3>OAuth</h3>Required scopes: <code>community.readonly</code> or <code>community</code>",
        "operationId": "getCompany",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of company.",
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "community.readonly",
              "community"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "company": {
                      "$ref": "#/components/schemas/company"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Companies"
        ],
        "summary": "Update a company",
        "description": "Update a certain company. <h3>OAuth</h3>Required scopes: <code>community</code>",
        "operationId": "updateCompany",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the company.",
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "company": {
                    "type": "object",
                    "properties": {
                      "billingAddress": {
                        "type": "string"
                      },
                      "businessAddress": {
                        "type": "object",
                        "properties": {
                          "city": {
                            "type": "string"
                          },
                          "countryCode": {
                            "type": "string"
                          },
                          "line1": {
                            "type": "string"
                          },
                          "line2": {
                            "type": "string"
                          },
                          "postalCode": {
                            "type": "string"
                          },
                          "state": {
                            "type": "string"
                          }
                        }
                      },
                      "legalName": {
                        "type": "string"
                      },
                      "metadata": {
                        "$ref": "#/components/schemas/metadata"
                      },
                      "notes": {
                        "type": "string"
                      },
                      "taxId": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      }
                    }
                  }
                },
                "required": [
                  "company"
                ]
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "community"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "company": {
                      "$ref": "#/components/schemas/company"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/events/v1": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Create an event",
        "description": "Create an event. <h3>OAuth</h3>Required scopes: <code>events</code>",
        "operationId": "createEvent",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createEvent"
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "events"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "event": {
                      "$ref": "#/components/schemas/event"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Retrieve events",
        "description": "Retrieve events. <h3>OAuth</h3>Required scopes: <code>events</code>",
        "operationId": "getEventsByOrganization",
        "parameters": [
          {
            "in": "query",
            "name": "locationRef",
            "required": true,
            "description": "The id of the location.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "The number of events to retrieve. Default: 25",
            "schema": {
              "type": "integer",
              "default": 25
            }
          },
          {
            "in": "query",
            "name": "nextPageToken",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order",
            "description": "The order of the events. createDate:asc, createDate:desc, startDate:asc, startDate:desc, endDate:asc, endDate:desc or relevance",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "events",
              "events.readonly"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "events": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/event"
                      }
                    },
                    "searchQueryNext": {
                      "type": "object",
                      "properties": {
                        "limit": {
                          "type": "integer"
                        },
                        "locationRef": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "nextPageToken": {
                          "type": "string"
                        },
                        "order": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/events/v1/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Retrieve an event",
        "description": "Retrieve an event. <h3>OAuth</h3>Required scopes: <code>events</code>",
        "operationId": "getEvent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "events",
              "events.readonly"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "event": {
                      "$ref": "#/components/schemas/event"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/events/v1/{id}/cancel": {
      "put": {
        "tags": [
          "Events"
        ],
        "summary": "Cancel an event",
        "description": "Cancel an event. <h3>OAuth</h3>Required scopes: <code>events</code>",
        "operationId": "cancelEvent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "events"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "event": {
                      "$ref": "#/components/schemas/event"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/events/v1/{id}/copy": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Copy an event",
        "description": "Copy an event. <h3>OAuth</h3>Required scopes: <code>events</code>",
        "operationId": "copyEvent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "events"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "event": {
                      "$ref": "#/components/schemas/event"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/events/tickets/v1": {
      "get": {
        "tags": [
          "Event tickets"
        ],
        "summary": "Retrieve event tickets",
        "description": "Retrieve all event tickets. <h3>OAuth</h3>Required scopes: <code>events.readonly</code> or <code>events</code>",
        "operationId": "getEventTickets",
        "parameters": [
          {
            "name": "locationRef",
            "in": "query",
            "description": "The id of the location.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 100,
              "default": 25
            },
            "description": "The number of items to return"
          },
          {
            "in": "query",
            "name": "nextPageToken",
            "schema": {
              "type": "string"
            },
            "description": "nextPageToken retrieved from a previous request"
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "events.readonly",
              "events"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tickets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/eventTicket"
                      }
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/events/tickets/v1/{id}": {
      "get": {
        "tags": [
          "Event tickets"
        ],
        "summary": "Retrieve an event ticket",
        "description": "Retrieve an event ticket. <h3>OAuth</h3>Required scopes: <code>events.readonly</code> or <code>events</code>",
        "operationId": "getEventTicket",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the event ticket.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "events.readonly",
              "events"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ticket": {
                      "$ref": "#/components/schemas/eventTicket"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/feed/comments/v1": {
      "post": {
        "tags": [
          "Feed posts"
        ],
        "summary": "Create a feed post comment",
        "description": "Create a feed post comment. <h3>OAuth</h3>Required scopes: <code>feed</code>",
        "operationId": "createFeedPostComment",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createFeedPostComment"
        },
        "security": [
          {
            "OAuth2": [
              "feed"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "comment": {
                      "$ref": "#/components/schemas/postComment"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/feed/comments/v1/{id}": {
      "delete": {
        "tags": [
          "Feed posts"
        ],
        "summary": "Delete a post comment",
        "description": "Delete a post comment. <h3>OAuth</h3>Required scopes: <code>feed</code>",
        "operationId": "deletePostComment",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the post comment.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "feed"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/feed/comments/v1/{id}/likes": {
      "post": {
        "tags": [
          "Feed posts"
        ],
        "summary": "Create a like for a post comment",
        "description": "Create a like for a post comment. <h3>OAuth</h3>Required scopes: <code>feed</code>",
        "operationId": "createLikeForPostComment",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the post comment.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "security": [
          {
            "OAuth2": [
              "feed"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "like": {
                      "$ref": "#/components/schemas/postLike"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Feed posts"
        ],
        "summary": "Delete a like for a post comment",
        "description": "Delete a like for a post comment. <h3>OAuth</h3>Required scopes: <code>feed</code>",
        "operationId": "deleteLikeForPostComment",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id of the post comment.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "security": [
          {
            "OAuth2": [
              "feed"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/feed/posts/v1": {
      "get": {
        "tags": [
          "Feed posts"
        ],
        "summary": "Get feed posts",
        "description": "Get feed posts. <h3>OAuth</h3>Required scopes: <code>feed.readonly</code> or <code>feed</code>",
        "operationId": "getFeedPosts",
        "parameters": [
          {
            "in": "query",
            "name": "locationRef",
            "description": "The id of the location.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "feed.readonly",
              "feed"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "posts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/post"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Feed posts"
        ],
        "summary": "Create a feed post",
        "description": "Create a feed post. <h3>OAuth</h3>Required scopes: <code>feed</code>",
        "operationId": "createFeedPost",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createFeedPost"
        },
        "security": [
          {
            "OAuth2": [
              "feed"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "post": {
                      "$ref": "#/components/schemas/post"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/feed/posts/v1/{id}": {
      "get": {
        "tags": [
          "Feed posts"
        ],
        "summary": "Get a feed post",
        "description": "Get a feed post. <h3>OAuth</h3>Required scopes: <code>feed</code> or <code>feed.readonly</code>",
        "operationId": "getFeedPost",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The id of the post."
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "feed",
              "feed.readonly"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "post": {
                      "$ref": "#/components/schemas/post"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Feed posts"
        ],
        "summary": "Delete a feed post",
        "description": "Delete a feed post. <h3>OAuth</h3>Required scopes: <code>feed</code>",
        "operationId": "deleteFeedPost",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The id of the post."
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "feed"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Feed posts"
        ],
        "summary": "Update a feed post",
        "description": "Update a feed post. <h3>OAuth</h3>Required scopes: <code>feed</code>",
        "operationId": "updateFeedPost",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The id of the post."
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "feed"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/updateFeedPost"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "post": {
                      "$ref": "#/components/schemas/post"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/feed/posts/v1/{id}/likes": {
      "get": {
        "tags": [
          "Feed posts"
        ],
        "summary": "Get likes for a post",
        "description": "Get likes for a post. <h3>OAuth</h3>Required scopes: <code>feed</code> or <code>feed.readonly</code>",
        "operationId": "getLikesForPost",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The id of the post."
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "feed",
              "feed.readonly"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "likes": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/postLike"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Feed posts"
        ],
        "summary": "Create a like for a post",
        "description": "Create a like for a post. <h3>OAuth</h3>Required scopes: <code>feed</code>",
        "operationId": "createLikeForPost",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The id of the post."
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "feed"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "like": {
                      "$ref": "#/components/schemas/postLike"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Feed posts"
        ],
        "summary": "Delete a like for a post",
        "description": "Delete a like for a post. <h3>OAuth</h3>Required scopes: <code>feed</code>",
        "operationId": "deleteLikeForPost",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The id of the post."
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "OAuth2": [
              "feed"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/feed/posts/v1/{id}/comments": {
      "get": {
        "tags": [
          "Feed posts"
        ],
        "summary": "Get comments for a post",
        "description": "Get comments for a post. <h3>OAuth</h3>Required scopes: <code>feed</code>",
        "operationId": "getPostComments",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true,
            "description": "The id of the post."
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "feed",
              "feed.readonly"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "comments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/postComment"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/v1": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Retrieve invoices",
        "description": "Retrieve all invoices based on certain parameters. <h3>OAuth</h3>Required scopes: <code>invoices.readonly</code> or <code>invoices</code>",
        "operationId": "getInvoices",
        "parameters": [
          {
            "name": "companyRef",
            "in": "query",
            "description": "The id of the company",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "membershipRef",
            "in": "query",
            "description": "The id of the membership",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "locationRef",
            "in": "query",
            "description": "The id of the location.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "issueDate",
            "description": "The date filter of items.",
            "schema": {
              "type": "object",
              "properties": {
                "lte": {
                  "format": "date-time",
                  "type": "string",
                  "description": "Get invoices with less issueDate. Example: issueDate[lte]=2021-05-21T10:00:00Z"
                },
                "gte": {
                  "format": "date-time",
                  "type": "string",
                  "description": "Get invoices with greater issueDate. Example: issueDate[gte]=2021-05-21T10:00:00Z"
                }
              }
            }
          },
          {
            "in": "query",
            "name": "nextPageToken",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The token to get the next page of results"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 100,
              "default": 25
            },
            "description": "The number of items to return"
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status of an invoice.",
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "issued",
                "voided",
                "paid"
              ]
            }
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "invoices.readonly",
              "invoices"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invoices": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/invoice"
                      }
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Create an invoice",
        "description": "Create an invoice for a member or a company.",
        "operationId": "createInvoice",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createInvoice"
        },
        "security": [
          {
            "OAuth2": [
              "invoices"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invoice": {
                      "$ref": "#/components/schemas/invoice"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/v1/{id}": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Retrieve an invoice",
        "description": "Retrieve a certain invoice. <h3>OAuth</h3>Required scopes: <code>invoices.readonly</code> or <code>invoices</code>",
        "operationId": "getInvoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of an invoice.",
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "invoices.readonly",
              "invoices"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invoice": {
                      "$ref": "#/components/schemas/invoice"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/v1/{id}/pay": {
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Pay an invoice",
        "description": "Mark an invoice as paid by <code>External Payment</code>. <h3>OAuth</h3>Required scopes: <code>invoices</code>",
        "operationId": "payInvoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of an invoice",
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/payInvoice"
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "invoices"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction": {
                      "$ref": "#/components/schemas/invoice"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/items/v1": {
      "post": {
        "tags": [
          "Invoice items"
        ],
        "summary": "Create a invoice item",
        "description": "Create an item in an invoice. <h3>OAuth</h3>Required scopes: <code>invoices</code>",
        "operationId": "createInvoiceItem",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createInvoiceItem"
        },
        "security": [
          {
            "OAuth2": [
              "invoices"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invoiceItem": {
                      "$ref": "#/components/schemas/invoiceItem"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/locations/v1": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Retrieve all locations",
        "description": "Retrieve all locations. <h3>OAuth</h3>Required scopes: <code>locations.readonly</code> or <code>locations</code>",
        "operationId": "getLocations",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "locations.readonly",
              "locations"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "locations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/location"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/community/memberships/v1": {
      "get": {
        "tags": [
          "Memberships"
        ],
        "summary": "Retrieve memberships",
        "description": "Retrieve all memberships. <h3>OAuth</h3>Required scopes: <code>memberships.readonly</code> or <code>memberships</code>",
        "operationId": "getMemberships",
        "parameters": [
          {
            "in": "query",
            "name": "companyRef",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter by company reference"
          },
          {
            "name": "locationRef",
            "in": "query",
            "description": "The id of the location.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 100,
              "default": 25
            },
            "description": "The number of items to return"
          },
          {
            "in": "query",
            "name": "nextPageToken",
            "schema": {
              "type": "string"
            },
            "description": "nextPageToken retrieved from a previous request"
          },
          {
            "name": "userEmail",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "email"
            },
            "description": "Filter by user's email"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "requested"
              ]
            },
            "description": "use requested to get all membership requests"
          },
          {
            "in": "query",
            "name": "types",
            "schema": {
              "type": "string",
              "enum": [
                "member",
                "nonmember"
              ]
            },
            "description": "Filter by types. Pass them as comma separated values."
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "community.readonly",
              "community"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "memberships": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/membership"
                      }
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Memberships"
        ],
        "summary": "Create a membership",
        "description": "Create a membership and send an email invitation to join if type is member. <h3>OAuth</h3>Required scopes: <code>community</code>",
        "operationId": "createMembership",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createMembership"
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "community"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "membership": {
                      "$ref": "#/components/schemas/membership"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/community/memberships/v1/{id}": {
      "get": {
        "tags": [
          "Memberships"
        ],
        "summary": "Retrieve a membership",
        "description": "Retrieve a certain membership. <h3>OAuth</h3>Required scopes: <code>community.readonly</code> or <code>community</code>",
        "operationId": "getMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of membership.",
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "community.readonly",
              "community"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "membership": {
                      "$ref": "#/components/schemas/membership"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Memberships"
        ],
        "summary": "Delete a membership",
        "description": "Delete a certain membership. <h3>OAuth</h3>Required scopes: <code>community</code>",
        "operationId": "deleteMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the membership.",
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "community"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Memberships"
        ],
        "summary": "Update a membership",
        "description": "Update a certain membership. <h3>OAuth</h3>Required scopes: <code>community</code>",
        "operationId": "updateMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the membership.",
            "schema": {
              "format": "int64",
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "membership": {
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "$ref": "#/components/schemas/metadata"
                      },
                      "role": {
                        "type": "string",
                        "enum": [
                          "admin",
                          "member"
                        ]
                      }
                    },
                    "required": [
                      "metadata",
                      "role"
                    ]
                  }
                },
                "required": [
                  "membership"
                ]
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "community"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "membership": {
                      "$ref": "#/components/schemas/membership"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/community/memberships/v1/deleted": {
      "get": {
        "tags": [
          "Memberships"
        ],
        "summary": "Retrieve deleted memberships",
        "description": "Retrieve all deleted memberships. <h3>OAuth</h3>Required scopes: <code>community.readonly</code> or <code>community</code>",
        "operationId": "getMembershipsDeleted",
        "parameters": [
          {
            "name": "locationRef",
            "in": "query",
            "description": "The id of the location.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 100,
              "default": 25
            },
            "description": "The number of items to return"
          },
          {
            "name": "userEmail",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "email"
            },
            "description": "Filter by user's email"
          },
          {
            "in": "query",
            "name": "nextPageToken",
            "schema": {
              "type": "string"
            },
            "description": "nextPageToken retrieved from a previous request"
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "community.readonly",
              "community"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "memberships": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/membership"
                      }
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/networks/v1": {
      "get": {
        "tags": [
          "Networks"
        ],
        "summary": "Retrieve networks",
        "description": "Retrieve all networks you are in.",
        "operationId": "getNetworks",
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "networks": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/network"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/orders/v1": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieve orders",
        "description": "Retrieve all orders of products from shop. <h3>OAuth</h3>Required scopes: <code>shop.readonly</code> or <code>shop</code>",
        "operationId": "getOrders",
        "parameters": [
          {
            "in": "query",
            "name": "locationRef",
            "description": "The id of the location.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "createDate",
            "description": "The date filter of items.",
            "schema": {
              "type": "object",
              "properties": {
                "lte": {
                  "format": "date-time",
                  "type": "string",
                  "description": "Get orders with less createDate. Example: createDate[lte]=2021-05-21T10:00:00Z"
                },
                "gte": {
                  "format": "date-time",
                  "type": "string",
                  "description": "Get orders with greater createDate. Example: createDate[gte]=2021-05-21T10:00:00Z"
                }
              }
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 100,
              "default": 25
            },
            "description": "The number of items to return"
          },
          {
            "in": "query",
            "name": "nextPageToken",
            "schema": {
              "type": "string"
            },
            "description": "nextPageToken retrieved from a previous request"
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "shop.readonly",
              "shop"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "orders": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/order"
                      }
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/plans/v1": {
      "get": {
        "tags": [
          "Plans"
        ],
        "summary": "Retrieve plans",
        "description": "Retrieve all plans. <h3>OAuth</h3>Required scopes: <code>plans.readonly</code> or <code>plans</code>",
        "operationId": "getPlans",
        "parameters": [
          {
            "name": "locationRef",
            "in": "query",
            "description": "The id of the location.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "plans.readonly",
              "plans"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plans": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/plan"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Plans"
        ],
        "summary": "Create a plan",
        "description": "Create a plan. <h3>OAuth</h3>Required scopes: <code>plans</code>",
        "operationId": "createPlan",
        "requestBody": {
          "$ref": "#/components/requestBodies/createPlan"
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "plans"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plan": {
                      "$ref": "#/components/schemas/plan"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/plans/v1/{id}": {
      "get": {
        "tags": [
          "Plans"
        ],
        "summary": "Retrieve a plan",
        "description": "Retrieve a certain plan. <h3>OAuth</h3>Required scopes: <code>plans.readonly</code> or <code>plans</code>",
        "operationId": "getPlan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the plan.",
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "plans.readonly",
              "plans"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plan": {
                      "$ref": "#/components/schemas/plan"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Plans"
        ],
        "summary": "Delete a plan",
        "description": "Delete a certain plan. <h3>OAuth</h3>Required scopes: <code>plans</code>",
        "operationId": "deletePlan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the plan.",
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "plans"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Plans"
        ],
        "summary": "Update a plan",
        "description": "Update a certain plan. <h3>OAuth</h3>Required scopes: <code>plans</code>",
        "operationId": "updatePlan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the plan.",
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/updatePlan"
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "plans"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/categories/v1": {
      "get": {
        "tags": [
          "Shop categories"
        ],
        "summary": "Retrieve shop categories",
        "description": "Retrieve all shop categories in the location. <h3>OAuth</h3>Required scopes: <code>shop.readonly</code> or <code>shop</code>",
        "operationId": "getShopCategories",
        "parameters": [
          {
            "in": "query",
            "name": "locationRef",
            "description": "The id of the location",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "shop.readonly",
              "shop"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "categories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/shopCategory"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Shop categories"
        ],
        "summary": "Create a shop category",
        "description": "Create a shop category. <h3>OAuth</h3>Required scopes: <code>shop</code>",
        "operationId": "createShopCategory",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createShopCategory"
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "shop"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "category": {
                      "$ref": "#/components/schemas/shopCategory"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/categories/v1/{id}": {
      "get": {
        "tags": [
          "Shop Categories"
        ],
        "summary": "Get a shop category",
        "description": "Get a shop category. <h3>OAuth</h3>Required scopes: <code>shop</code>",
        "operationId": "getShopCategory",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The id of the shop category",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "shop",
              "shop.readonly"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "category": {
                      "$ref": "#/components/schemas/shopCategory"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Shop Categories"
        ],
        "summary": "Delete a shop category",
        "description": "Delete a shop category. <h3>OAuth</h3>Required scopes: <code>shop</code>",
        "operationId": "deleteShopCategory",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The id of the shop category",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "shop"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Shop Categories"
        ],
        "summary": "Update a shop category",
        "description": "Update a shop category. <h3>OAuth</h3>Required scopes: <code>shop</code>",
        "operationId": "updateShopCategory",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The id of the shop category",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "shop"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/updateShopCategory"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "category": {
                      "$ref": "#/components/schemas/shopCategory"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/products/v1": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieve products",
        "description": "Retrieve products from shop. <h3>OAuth</h3>Required scopes: <code>shop.readonly</code> or <code>shop</code>",
        "operationId": "getProducts",
        "parameters": [
          {
            "name": "locationRef",
            "in": "query",
            "description": "The id of the location.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "shop.readonly",
              "shop"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "products": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/product"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create a product",
        "description": "Create a product in shop. <h3>OAuth</h3>Required scopes: <code>shop</code>",
        "operationId": "createProduct",
        "requestBody": {
          "$ref": "#/components/requestBodies/createProduct"
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "shop"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "product": {
                      "$ref": "#/components/schemas/product"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/shop/products/v1/{productId}": {
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Update a product",
        "description": "Update a certain product. <h3>OAuth</h3>Required scopes: <code>shop</code>",
        "operationId": "updateProduct",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The id of the product.",
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/updateProduct"
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "shop"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "product": {
                      "$ref": "#/components/schemas/product"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get a product",
        "description": "Get a certain product. <h3>OAuth</h3>Required scopes: <code>shop</code>",
        "operationId": "getProduct",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The id of the product.",
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "shop"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "product": {
                      "$ref": "#/components/schemas/product"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Delete a product",
        "description": "Delete a certain product. <h3>OAuth</h3>Required scopes: <code>shop</code>",
        "operationId": "deleteProduct",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The id of the product.",
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "required": true
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "shop"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/registrations/v1": {
      "get": {
        "tags": [
          "Registrations"
        ],
        "summary": "Retrieve registrations",
        "description": "Retrieve all registrations in network.",
        "operationId": "getRegistrations",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 100,
              "default": 25
            },
            "description": "The number of items to return"
          },
          {
            "in": "query",
            "name": "nextPageToken",
            "schema": {
              "type": "string"
            },
            "description": "nextPageToken retrieved from a previous request",
            "required": false
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "registrations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/registration"
                      }
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/resources/v1": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Retrieve resources",
        "description": "Retrieve resources in the location. Resources represent all kind of bookable items like rooms, hot desks, dedicated desks, parking lots. <h3>OAuth</h3>Required scopes: <code>resources.readonly</code> or <code>resources</code>",
        "operationId": "getResources",
        "parameters": [
          {
            "name": "locationRef",
            "in": "query",
            "description": "The id of the location.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "name": "types",
            "in": "query",
            "description": "The types of resources to retrieve. Pass them as comma separated values.",
            "schema": {
              "type": "string",
              "enum": [
                "hotDesk",
                "dedicatedDesk",
                "office",
                "parkingLot",
                "room"
              ]
            }
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "resources.readonly",
              "resources"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resources": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/resource"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/resources/v1/{id}": {
      "patch": {
        "tags": [
          "Resources"
        ],
        "summary": "Patch a resource",
        "description": "Patch a certain resource. <h3>OAuth</h3>Required scopes: <code>resources</code>",
        "operationId": "patchResource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the resource.",
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/patchResource"
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "resources"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/v1": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Retrieve subscriptions",
        "description": "Retrieve subscriptions. <h3>OAuth</h3>Required scopes: <code>subscriptions.readonly</code> or <code>subscriptions</code>",
        "operationId": "getSubscriptions",
        "parameters": [
          {
            "in": "query",
            "name": "locationRef",
            "description": "The id of the location.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 100,
              "default": 25
            },
            "description": "The number of items to return"
          },
          {
            "in": "query",
            "name": "nextPageToken",
            "schema": {
              "type": "string"
            },
            "description": "nextPageToken retrieved from a previous request"
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "subscriptions.readonly",
              "subscriptions"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "subscriptions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/subscription"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Create a subscription",
        "description": "Create a subscription for a membership or company. <h3>OAuth</h3>Required scopes: <code>subscriptions</code>",
        "operationId": "createSubscription",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/assignSubscription"
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "subscriptions"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "subscription": {
                      "$ref": "#/components/schemas/subscription"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/v1/{id}": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Retrieve a subscription",
        "description": "Retrieve a certain subscription. <h3>OAuth</h3>Required scopes: <code>subscriptions.readonly</code> or <code>subscriptions</code>",
        "operationId": "getSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the subscription.",
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "subscriptions.readonly",
              "subscriptions"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "subscription": {
                      "$ref": "#/components/schemas/subscription"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Update a subscription",
        "description": "Update a certain subscription. <h3>OAuth</h3>Required scopes: <code>subscriptions</code>",
        "operationId": "updateSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the subscription.",
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/patchSubscription"
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "subscriptions"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/support/tickets/v1": {
      "get": {
        "tags": [
          "Support tickets"
        ],
        "summary": "Retrieve support tickets",
        "description": "Retrieve all support tickets. <h3>OAuth</h3>Required scopes: <code>support.readonly</code> or <code>support</code>",
        "operationId": "getSupportTickets",
        "parameters": [
          {
            "in": "query",
            "name": "locationRef",
            "description": "The id of the location.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 100,
              "default": 25
            },
            "description": "The number of items to return"
          },
          {
            "in": "query",
            "name": "nextPageToken",
            "description": "nextPageToken retrieved from a previous request",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "support.readonly",
              "support"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nextPageToken": {
                      "type": "string"
                    },
                    "tickets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ticket"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Support tickets"
        ],
        "summary": "Create a support ticket",
        "description": "Create a support ticket. <h3>OAuth</h3>Required scopes: <code>support</code>",
        "operationId": "createSupportTicket",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createSupportTicket"
        },
        "security": [
          {
            "OAuth2": [
              "support"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "activities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ticketActivity"
                      }
                    },
                    "ticket": {
                      "$ref": "#/components/schemas/ticket"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/support/tickets/v1/{id}/status": {
      "put": {
        "tags": [
          "Support tickets"
        ],
        "summary": "Update support ticket status",
        "description": "Update support ticket status. <h3>OAuth</h3>Required scopes: <code>support</code>",
        "operationId": "updateSupportTicketStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the ticket.",
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ticket": {
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "new",
                          "inProgress",
                          "solved",
                          "closed"
                        ]
                      }
                    },
                    "required": [
                      "status"
                    ]
                  }
                },
                "required": [
                  "ticket"
                ]
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "support"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "activity": {
                      "$ref": "#/components/schemas/ticketActivity"
                    },
                    "ticket": {
                      "$ref": "#/components/schemas/ticket"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/support/tickets/v1/{id}/assignee": {
      "put": {
        "tags": [
          "Support tickets"
        ],
        "summary": "Update support ticket assignee",
        "description": "Update support ticket assignee. <h3>OAuth</h3>Required scopes: <code>support</code>",
        "operationId": "updateSupportTicketAssignee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the ticket.",
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ticket": {
                    "type": "object",
                    "properties": {
                      "membershipRefAssignee": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The id of the membership to assign the ticket to."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "support"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "activity": {
                      "$ref": "#/components/schemas/ticketActivity"
                    },
                    "ticket": {
                      "$ref": "#/components/schemas/ticket"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/support/tickets/v1/{id}": {
      "get": {
        "tags": [
          "Support tickets"
        ],
        "summary": "Retrieve a support ticket",
        "description": "Retrieve a support ticket. <h3>OAuth</h3>Required scopes: <code>support.readonly</code> or <code>support</code>",
        "operationId": "getSupportTicket",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the ticket.",
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "support",
              "support.readonly"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "activities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ticketActivity"
                      }
                    },
                    "ticket": {
                      "$ref": "#/components/schemas/ticket"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/support/tickets/v1/comment": {
      "post": {
        "tags": [
          "Support tickets"
        ],
        "summary": "Create a support ticket comment",
        "description": "Create a support ticket comment. <h3>OAuth</h3>Required scopes: <code>support</code>",
        "operationId": "createSupportTicketComment",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "activity": {
                    "type": "object",
                    "properties": {
                      "attachments": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "text": {
                        "type": "string"
                      },
                      "ticketRef": {
                        "type": "string",
                        "format": "uuid"
                      }
                    }
                  }
                },
                "required": [
                  "activity"
                ]
              }
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "support"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "activity": {
                      "$ref": "#/components/schemas/ticketActivity"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/support/tickets/v1/comment/{id}": {
      "delete": {
        "tags": [
          "Support tickets"
        ],
        "summary": "Delete a support ticket comment",
        "description": "Delete a support ticket comment. <h3>OAuth</h3>Required scopes: <code>support</code>",
        "operationId": "deleteSupportTicketComment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the ticket activity.",
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "support"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/support/tickets/v1/{id}/type": {
      "patch": {
        "tags": [
          "Support tickets"
        ],
        "summary": "Update a support ticket type",
        "description": "Update a support ticket type. <h3>OAuth</h3>Required scopes: <code>support</code>",
        "operationId": "updateSupportTicketType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the ticket.",
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "support"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ticket": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "access",
                          "accountAndBilling",
                          "bookings",
                          "cleaning",
                          "discriminationAndHarassment",
                          "internet",
                          "mailAndPackages",
                          "noiseAndAcoustics",
                          "offensiveOrObjectionableContent",
                          "other",
                          "printing",
                          "repairAndMaintenance",
                          "temperatureAndVentilation",
                          "websiteAndApp"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/credits/v1": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Retrieve credits transactions",
        "description": "Retrieve credits transactions. <h3>OAuth</h3>Required scopes: <code>transactions.readonly</code> or <code>transactions</code>",
        "operationId": "getCreditsTransactions",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 100,
              "default": 25
            },
            "description": "The number of items to return"
          },
          {
            "in": "query",
            "name": "nextPageToken",
            "schema": {
              "type": "string"
            },
            "description": "nextPageToken retrieved from a previous request"
          },
          {
            "in": "query",
            "name": "createDate",
            "description": "The date filter of items.",
            "schema": {
              "type": "object",
              "properties": {
                "lte": {
                  "format": "date-time",
                  "type": "string",
                  "description": "Get transactions with less createDate. Example: createDate[lte]=2021-05-21T10:00:00Z"
                },
                "gte": {
                  "format": "date-time",
                  "type": "string",
                  "description": "Get transactions with greater createDate. Example: createDate[gte]=2021-05-21T10:00:00Z"
                }
              }
            }
          },
          {
            "in": "query",
            "name": "locationRef",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The id of the location to get transactions for"
          },
          {
            "in": "query",
            "name": "membershipRef",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The id of the membership to get transactions for"
          },
          {
            "in": "query",
            "name": "companyRef",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The id of the company to get transactions for"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "transactions"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/transactionCreditsExpanded"
                      }
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Create a credits transaction",
        "description": "Create a credits transaction. <h3>OAuth</h3>Required scopes: <code>transactions</code>",
        "operationId": "createCreditsTransaction",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "transactions"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createCreditsTransaction"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction": {
                      "$ref": "#/components/schemas/transactionCredits"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/day_passes/v1": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Retrieve day passes transactions",
        "description": "Retrieve day passes transactions. <h3>OAuth</h3>Required scopes: <code>transactions.readonly</code> or <code>transactions</code>",
        "operationId": "getDayPassesTransactions",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 100,
              "default": 25
            },
            "description": "The number of items to return"
          },
          {
            "in": "query",
            "name": "nextPageToken",
            "schema": {
              "type": "string"
            },
            "description": "nextPageToken retrieved from a previous request"
          },
          {
            "in": "query",
            "name": "createDate",
            "description": "The date filter of items.",
            "schema": {
              "type": "object",
              "properties": {
                "lte": {
                  "format": "date-time",
                  "type": "string",
                  "description": "Get transactions with less createDate. Example: createDate[lte]=2021-05-21T10:00:00Z"
                },
                "gte": {
                  "format": "date-time",
                  "type": "string",
                  "description": "Get transactions with greater createDate. Example: createDate[gte]=2021-05-21T10:00:00Z"
                }
              }
            }
          },
          {
            "in": "query",
            "name": "locationRef",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The id of the location to get transactions for"
          },
          {
            "in": "query",
            "name": "membershipRef",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The id of the membership to get transactions for"
          },
          {
            "in": "query",
            "name": "companyRef",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The id of the company to get transactions for"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "transactions"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/transactionDayPassesExpanded"
                      }
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Create a day passes transaction",
        "description": "Create a day passes transaction. <h3>OAuth</h3>Required scopes: <code>transactions</code>",
        "operationId": "createDayPassesTransaction",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "transactions"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createDayPassesTransaction"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction": {
                      "$ref": "#/components/schemas/transactionDayPasses"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/money/v1": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Retrieve money transactions",
        "description": "Retrieve money transactions. <h3>OAuth</h3>Required scopes: <code>transactions.readonly</code> or <code>transactions</code>",
        "operationId": "getMoneyTransactions",
        "parameters": [
          {
            "name": "locationRef",
            "in": "query",
            "description": "The id of the location",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 100,
              "default": 25
            },
            "description": "The number of items to return"
          },
          {
            "name": "status",
            "in": "query",
            "description": "The payment status of transactions",
            "schema": {
              "type": "string",
              "enum": [
                "canceled",
                "failed",
                "pending",
                "processing",
                "succeeded"
              ]
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of transactions",
            "schema": {
              "type": "string",
              "enum": [
                "booking",
                "creditPackage",
                "eventTicket",
                "invoice",
                "order",
                "subscription"
              ]
            }
          },
          {
            "in": "query",
            "name": "createDate",
            "description": "The date filter of items.",
            "schema": {
              "type": "object",
              "properties": {
                "lte": {
                  "format": "date-time",
                  "type": "string",
                  "description": "Get transactions with less createDate. Example: createDate[lte]=2021-05-21T10:00:00Z"
                },
                "gte": {
                  "format": "date-time",
                  "type": "string",
                  "description": "Get transactions with greater createDate. Example: createDate[gte]=2021-05-21T10:00:00Z"
                }
              }
            }
          },
          {
            "in": "query",
            "name": "nextPageToken",
            "schema": {
              "type": "string"
            },
            "description": "nextPageToken retrieved from a previous request"
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "transactions.readonly",
              "transactions"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/transaction"
                      }
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/money/v1/{id}": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Retrieve a money transaction",
        "description": "Retrieve a money transaction. <h3>OAuth</h3>Required scopes: <code>transactions.readonly</code> or <code>transactions</code>",
        "operationId": "getMoneyTransaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the transaction",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "transactions.readonly",
              "transactions"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transaction": {
                      "$ref": "#/components/schemas/transaction"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/visitors/requests/v1": {
      "post": {
        "tags": [
          "Visitors"
        ],
        "summary": "Create a request",
        "description": "Create a request. <h3>OAuth</h3>Required scopes: <code>visitors</code>",
        "operationId": "createRequest",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "visitors"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createVisitRequest"
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "request": {
                      "$ref": "#/components/schemas/visitRequest"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/visitors/visits/v1": {
      "get": {
        "tags": [
          "Visitors"
        ],
        "summary": "Retrieve visits",
        "description": "Retrieve visits. <h3>OAuth</h3>Required scopes: <code>visitors.readonly</code> or <code>visitors</code>",
        "operationId": "getVisits",
        "parameters": [
          {
            "in": "query",
            "name": "locationRef",
            "description": "The id of the location.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "userRefHost",
            "description": "The id of the user, host of the visit.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "createDate",
            "description": "The date filter of items.",
            "schema": {
              "type": "object",
              "properties": {
                "lte": {
                  "format": "date-time",
                  "type": "string",
                  "description": "Get visits with less or equal create date. Example: createDate[lte]=2021-05-21T10:00:00Z"
                },
                "gte": {
                  "format": "date-time",
                  "type": "string",
                  "description": "Get visits with greater or equal create date. Example: createDate[gte]=2021-05-21T10:00:00Z"
                }
              }
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 100,
              "default": 25
            },
            "description": "The number of items to return"
          },
          {
            "in": "query",
            "name": "nextPageToken",
            "schema": {
              "type": "string"
            },
            "description": "nextPageToken retrieved from a previous request"
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "visitors.readonly",
              "visitors"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "visits": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/visit"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Visitors"
        ],
        "summary": "Create a visit",
        "description": "Create a visit. <h3>OAuth</h3>Required scopes: <code>visitors</code>",
        "operationId": "createVisit",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createVisit"
        },
        "security": [
          {
            "OAuth2": [
              "visitors"
            ]
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "visit": {
                      "$ref": "#/components/schemas/visit"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/visitors/visits/v1/checkin": {
      "post": {
        "tags": [
          "Visitors"
        ],
        "summary": "Check in a visit",
        "description": "Check in a visit. <h3>OAuth</h3>Required scopes: <code>visitors</code>",
        "operationId": "checkInVisit",
        "parameters": [
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/checkInVisit"
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "visitors"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "visit": {
                      "type": "object",
                      "$ref": "#/components/schemas/visit"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    },
    "/visitors/visits/v1/{id}": {
      "get": {
        "tags": [
          "Visitors"
        ],
        "summary": "Retrieve a visit",
        "description": "Retrieve a visit by id. <h3>OAuth</h3>Required scopes: <code>visitors.readonly</code> or <code>visitors</code>",
        "operationId": "getVisit",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The id of the visit",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "spacebring-network-id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "The id of the network. Required when using bearer token authentication"
          }
        ],
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "visitors.readonly",
              "visitors"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "visit": {
                      "type": "object",
                      "$ref": "#/components/schemas/visit"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Visitors"
        ],
        "summary": "Delete a visit",
        "description": "Delete a visit by id. <h3>OAuth</h3>Required scopes: <code>visitors</code>",
        "operationId": "deleteVisit",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The id of the visit",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "security": [
          {
            "OAuth2": [
              "visitors"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Visitors"
        ],
        "summary": "Update a visit",
        "description": "Update a visit by id. <h3>OAuth</h3>Required scopes: <code>visitors</code>",
        "operationId": "updateVisit",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The id of the visit",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/updateVisit"
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "OAuth2": [
              "visitors.readonly",
              "visitors"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "visit": {
                      "type": "object",
                      "$ref": "#/components/schemas/visit"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/responseError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BasicAuth": {
        "type": "http",
        "description": "See our [authentication documentation](/api-reference/authentication#basic-authentication) for how to authorize your requests",
        "scheme": "basic"
      },
      "OAuth2": {
        "type": "oauth2",
        "description": "See our [authentication documentation](/api-reference/authentication#oauth2) for how to authorize your requests",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://api.spacebring.com/oauth2/authorize",
            "tokenUrl": "https://api.spacebring.com/oauth2/token",
            "refreshUrl": "https://api.spacebring.com/oauth2/token",
            "scopes": {
              "benefits.readonly": "Read benefits and applications",
              "benefits": "Read and write benefits and applications",
              "community.readonly": "Read community companies and memberships",
              "community": "Read and write community companies and memberships",
              "events.readonly": "Read events and tickets",
              "events": "Read and write events and tickets",
              "feed.readonly": "Read feed posts",
              "feed": "Read and write feed posts",
              "invoices.readonly": "Read invoices",
              "invoices": "Read and write invoices",
              "locations.readonly": "Read locations",
              "locations": "Read and write locations",
              "plans.readonly": "Read plans",
              "plans": "Read and write plans",
              "resources.readonly": "Read resources and bookings",
              "resources": "Read and write resources and bookings",
              "subscriptions.readonly": "Read subscriptions",
              "subscriptions": "Read and write subscriptions",
              "shop.readonly": "Read products and orders",
              "shop": "Read and write products and orders",
              "support.readonly": "Read support tickets",
              "support": "Read and write support tickets",
              "transactions.readonly": "Read transactions",
              "transactions": "Read and write transactions",
              "visitors.readonly": "Read visitors",
              "visitors": "Read and write visitors"
            }
          }
        }
      }
    },
    "schemas": {
      "dateSchema": {
        "format": "date-time",
        "type": "string",
        "description": "The date and time in ISO 8601 format, e.g. 2021-05-21T10:00:00Z"
      },
      "benefitApplication": {
        "type": "object",
        "properties": {
          "benefit": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string"
              },
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "mediaUrl": {
                "type": "string",
                "format": "uri"
              },
              "subtitle": {
                "type": "string"
              },
              "title": {
                "type": "string"
              }
            }
          },
          "comment": {
            "type": "string"
          },
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "locationRef": {
            "type": "string",
            "format": "uuid"
          },
          "membershipRef": {
            "type": "string",
            "format": "uuid"
          },
          "number": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "about": {
                "type": "string"
              },
              "blocked": {
                "type": "boolean"
              },
              "createDate": {
                "$ref": "#/components/schemas/dateSchema"
              },
              "deleteDate": {
                "$ref": "#/components/schemas/dateSchema"
              },
              "email": {
                "type": "string",
                "format": "email"
              },
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              },
              "phoneNumber": {
                "type": "string"
              },
              "photoUrl": {
                "type": "string",
                "format": "uri"
              },
              "restricted": {
                "type": "boolean"
              },
              "surname": {
                "type": "string"
              }
            }
          }
        }
      },
      "responseError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "benefitCategory": {
        "type": "object",
        "properties": {
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "locationRef": {
            "type": "string",
            "format": "uuid"
          },
          "networkRef": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "benefit": {
        "type": "object",
        "properties": {
          "application": {
            "type": "object",
            "properties": {
              "confirmationEmail": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  },
                  "template": {
                    "type": "string"
                  }
                }
              },
              "allowance": {
                "type": "string",
                "enum": [
                  "once",
                  "unlimited"
                ]
              },
              "enabled": {
                "type": "boolean"
              },
              "buttonLabel": {
                "type": "string",
                "enum": [
                  "apply",
                  "buy",
                  "contact",
                  "get",
                  "learnMore"
                ]
              }
            }
          },
          "categoryRef": {
            "type": "string",
            "format": "uuid"
          },
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "locationRef": {
            "type": "string",
            "format": "uuid"
          },
          "subtitle": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "updateDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "visibilityType": {
            "type": "string"
          }
        }
      },
      "user": {
        "type": "object",
        "properties": {
          "about": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "photoUrl": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          }
        }
      },
      "payment": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "The amount of the payment"
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency code of the payment"
          },
          "invoiceItemRef": {
            "type": "string",
            "description": "The reference ID of the invoice item"
          },
          "status": {
            "type": "string",
            "enum": [
              "succeeded",
              "pending",
              "processing",
              "canceled",
              "failed"
            ]
          },
          "tax": {
            "type": "object",
            "properties": {
              "inclusive": {
                "type": "boolean"
              },
              "rate": {
                "type": "number"
              }
            }
          },
          "transactionRef": {
            "type": "string",
            "description": "The reference ID of the transaction"
          },
          "type": {
            "type": "string",
            "enum": [
              "credits",
              "dayPasses",
              "external",
              "flow",
              "fondy",
              "freedompay",
              "invoice",
              "kakaopay",
              "mercadopago",
              "paypal",
              "paystack",
              "plata",
              "stripe",
              "tap",
              "wayforpay"
            ]
          }
        }
      },
      "booking": {
        "type": "object",
        "properties": {
          "attendees": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "membershipRef": {
                  "type": "string",
                  "format": "uuid"
                },
                "user": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "deleteDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "endDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "memo": {
            "type": "string"
          },
          "membershipRefOwner": {
            "format": "uuid",
            "type": "string"
          },
          "payment": {
            "$ref": "#/components/schemas/payment"
          },
          "resourceRef": {
            "format": "uuid",
            "type": "string"
          },
          "seats": {
            "type": "integer"
          },
          "startDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "title": {
            "type": "string"
          },
          "updateDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "userOwner": {
            "$ref": "#/components/schemas/user"
          }
        }
      },
      "metadata": {
        "type": "object",
        "description": "Use to attach key-value data to the object. Available only for admins."
      },
      "company": {
        "type": "object",
        "properties": {
          "billingAddress": {
            "type": "string"
          },
          "businessAddress": {
            "type": "object",
            "properties": {
              "city": {
                "type": "string"
              },
              "countryCode": {
                "type": "string"
              },
              "line1": {
                "type": "string"
              },
              "line2": {
                "type": "string"
              },
              "postalCode": {
                "type": "string"
              },
              "state": {
                "type": "string"
              }
            }
          },
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "credits": {
            "type": "object",
            "properties": {
              "expiring": {
                "type": "number"
              },
              "permanent": {
                "type": "number"
              }
            }
          },
          "dayPasses": {
            "type": "object",
            "properties": {
              "expiring": {
                "type": "number"
              }
            }
          },
          "deleteDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "id": {
            "type": "string"
          },
          "legalName": {
            "type": "string"
          },
          "locationRef": {
            "format": "uuid",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "notes": {
            "type": "string"
          },
          "subscriptionRef": {
            "format": "uuid",
            "type": "string"
          },
          "taxId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "event": {
        "type": "object",
        "properties": {
          "applicationType": {
            "type": "string",
            "enum": [
              "purchase",
              "none"
            ]
          },
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "description": {
            "type": "string"
          },
          "endDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "imageUrl": {
            "type": "string"
          },
          "limitedAttendees": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "limit": {
                "type": "integer"
              }
            }
          },
          "locationRef": {
            "type": "string",
            "format": "uuid"
          },
          "networkRef": {
            "type": "string",
            "format": "uuid"
          },
          "price": {
            "type": "object",
            "properties": {
              "credits": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number"
                  },
                  "enabled": {
                    "type": "boolean"
                  }
                }
              },
              "money": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number"
                  },
                  "enabled": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "refundThreshold": {
            "type": "string",
            "enum": [
              "noRefund",
              "fifteenMinutes",
              "thirtyMinutes",
              "oneHour",
              "twoHours",
              "fourHours",
              "sixHours",
              "twelveHours",
              "oneDay",
              "twoDays",
              "oneWeek",
              "twoWeeks",
              "fourWeeks"
            ]
          },
          "startDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "title": {
            "type": "string"
          },
          "venue": {
            "type": "string"
          },
          "visibilityType": {
            "type": "string",
            "enum": [
              "public",
              "admins",
              "networkMembers",
              "members"
            ]
          }
        }
      },
      "eventTicket": {
        "type": "object",
        "properties": {
          "checkInDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "deleteDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "event": {
            "type": "object",
            "properties": {
              "endDate": {
                "$ref": "#/components/schemas/dateSchema"
              },
              "id": {
                "format": "uuid",
                "type": "string"
              },
              "media": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    }
                  }
                }
              },
              "location": {
                "type": "object",
                "properties": {
                  "id": {
                    "format": "uuid"
                  },
                  "timezoneId": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  }
                }
              },
              "startDate": {
                "$ref": "#/components/schemas/dateSchema"
              },
              "title": {
                "type": "string"
              },
              "venue": {
                "type": "string"
              },
              "visibilityType": {
                "type": "string"
              }
            }
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "locationRef": {
            "format": "uuid",
            "type": "string"
          },
          "membershipRef": {
            "format": "uuid",
            "type": "string"
          },
          "payment": {
            "$ref": "#/components/schemas/payment"
          },
          "role": {
            "type": "string",
            "enum": [
              "attendee",
              "host"
            ]
          },
          "user": {
            "$ref": "#/components/schemas/user"
          }
        }
      },
      "postComment": {
        "type": "object",
        "properties": {
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the comment"
          },
          "liked": {
            "type": "boolean",
            "description": "Whether the user has liked the comment"
          },
          "likes": {
            "type": "integer",
            "description": "The number of likes the comment has"
          },
          "membership": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "The ID of the membership"
              },
              "user": {
                "type": "object",
                "properties": {
                  "blocked": {
                    "type": "boolean",
                    "description": "Whether the user is blocked"
                  },
                  "deleteDate": {
                    "$ref": "#/components/schemas/dateSchema"
                  },
                  "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The ID of the user"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the user"
                  },
                  "photoUrl": {
                    "type": "string",
                    "description": "The URL of the user's photo"
                  },
                  "surname": {
                    "type": "string",
                    "description": "The surname of the user"
                  }
                }
              }
            }
          },
          "mentions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The ID of the mention"
                },
                "value": {
                  "type": "string",
                  "description": "The value of the mention"
                }
              }
            }
          },
          "parentCommentRef": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the parent comment. If the comment is a reply, this will be the ID of the parent comment. If the comment is a top-level comment, this property won't be present."
          },
          "postRef": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the post"
          },
          "text": {
            "type": "string",
            "description": "The text of the comment"
          }
        }
      },
      "postLike": {
        "type": "object",
        "properties": {
          "commentRef": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the comment"
          },
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the like"
          },
          "membership": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "The ID of the membership"
              },
              "user": {
                "type": "object",
                "properties": {
                  "blocked": {
                    "type": "boolean",
                    "description": "Whether the user is blocked"
                  },
                  "deleteDate": {
                    "$ref": "#/components/schemas/dateSchema"
                  },
                  "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The ID of the user"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the user"
                  },
                  "photoUrl": {
                    "type": "string",
                    "description": "The URL of the user's photo"
                  },
                  "surname": {
                    "type": "string",
                    "description": "The surname of the user"
                  }
                }
              }
            }
          },
          "postRef": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the post"
          }
        }
      },
      "post": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "integer"
          },
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "liked": {
            "type": "boolean"
          },
          "likes": {
            "type": "integer"
          },
          "locale": {
            "type": "string"
          },
          "locationRef": {
            "format": "uuid",
            "type": "string"
          },
          "media": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "height": {
                  "type": "integer"
                },
                "id": {
                  "format": "uuid",
                  "type": "string"
                },
                "key": {
                  "type": "string"
                },
                "mime": {
                  "type": "string"
                },
                "url": {
                  "format": "uri",
                  "type": "string"
                },
                "width": {
                  "type": "integer"
                }
              }
            }
          },
          "membership": {
            "type": "object",
            "properties": {
              "id": {
                "format": "uuid",
                "type": "string"
              },
              "user": {
                "$ref": "#/components/schemas/user"
              }
            }
          },
          "membershipRef": {
            "format": "uuid",
            "type": "string"
          },
          "og": {
            "type": "object"
          },
          "pinned": {
            "type": "boolean"
          },
          "text": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/user"
          }
        }
      },
      "invoiceItem": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "float"
          },
          "booking": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "resource": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "title": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "dedicatedDesk",
                      "hotDesk",
                      "office",
                      "parkingLot",
                      "room"
                    ]
                  }
                }
              }
            }
          },
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "creditPackage": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number"
              }
            }
          },
          "currencyCode": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "discountedAmount": {
            "type": "number"
          },
          "discounts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "coupon": {
                  "type": "object",
                  "properties": {
                    "amountOff": {
                      "type": "number",
                      "description": "One of amountOff or percentOff must be present."
                    },
                    "currencyCode": {
                      "type": "string",
                      "description": "Currency code exists if amountOff is present."
                    },
                    "percentOff": {
                      "type": "number",
                      "description": "One of amountOff or percentOff must be present."
                    }
                  }
                }
              }
            }
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "invoiceRef": {
            "type": "string",
            "format": "uuid"
          },
          "netDiscountedAmount": {
            "type": "number"
          },
          "netUnitAmount": {
            "type": "number",
            "format": "float"
          },
          "order": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "option": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              },
              "product": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "title": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "plan": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "title": {
                "type": "string"
              }
            }
          },
          "quantity": {
            "type": "number",
            "format": "integer"
          },
          "tax": {
            "type": "object",
            "properties": {
              "inclusive": {
                "type": "boolean"
              },
              "rate": {
                "type": "number",
                "format": "float"
              }
            }
          },
          "ticket": {
            "type": "object",
            "properties": {
              "createDate": {
                "$ref": "#/components/schemas/dateSchema"
              },
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "event": {
                "type": "object",
                "properties": {
                  "endDate": {
                    "$ref": "#/components/schemas/dateSchema"
                  },
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "startDate": {
                    "$ref": "#/components/schemas/dateSchema"
                  },
                  "title": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "booking",
              "creditPackage",
              "custom",
              "eventTicket",
              "order",
              "subscriptionItem"
            ]
          },
          "unitAmount": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "timezoneId": {
        "type": "string",
        "description": "Timezone identifier for the location (e.g. 'Europe/Kyiv')"
      },
      "invoice": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "float"
          },
          "company": {
            "$ref": "#/components/schemas/company"
          },
          "companyRef": {
            "type": "string",
            "format": "uuid"
          },
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "currencyCode": {
            "type": "string"
          },
          "dueDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "issueDate": {
            "$ref": "#/components/schemas/dateSchema",
            "description": "Datetime when invoice was made ready for payment."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/invoiceItem"
            }
          },
          "locationRef": {
            "type": "string",
            "format": "uuid"
          },
          "membershipRef": {
            "type": "string",
            "format": "uuid"
          },
          "number": {
            "type": "string"
          },
          "pdfUrl": {
            "type": "string",
            "format": "uri"
          },
          "status": {
            "type": "string",
            "enum": [
              "canceled",
              "draft",
              "failed",
              "issued",
              "paid",
              "pending",
              "processing",
              "succeeded",
              "voided"
            ]
          },
          "timezoneId": {
            "$ref": "#/components/schemas/timezoneId"
          },
          "transaction": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number",
                "format": "float"
              },
              "createDate": {
                "$ref": "#/components/schemas/dateSchema"
              },
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "paymentMethod": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "label": {
                    "type": "string",
                    "enum": [
                      "American Express",
                      "China UnionPay",
                      "Diners Club",
                      "Discover",
                      "Japan Credit Bureau",
                      "Mastercard",
                      "Unknown",
                      "Visa"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "external",
                      "flow",
                      "fondy",
                      "freedompay",
                      "kakaopay",
                      "mercadopago",
                      "paypal",
                      "paystack",
                      "plata",
                      "stripe",
                      "tap",
                      "wayforpay"
                    ]
                  }
                }
              },
              "status": {
                "type": "string",
                "enum": [
                  "canceled",
                  "failed",
                  "pending",
                  "processing",
                  "succeeded"
                ]
              },
              "refund": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "format": "float"
                  },
                  "createDate": {
                    "$ref": "#/components/schemas/dateSchema"
                  },
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "user": {
            "$ref": "#/components/schemas/user"
          },
          "voidDate": {
            "$ref": "#/components/schemas/dateSchema"
          }
        }
      },
      "location": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "currencyCode": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "email": {
            "format": "email",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "locale": {
            "type": "string",
            "enum": [
              "en",
              "es",
              "ko",
              "uk",
              "ru"
            ]
          },
          "networkRef": {
            "format": "uuid",
            "type": "string"
          },
          "timezoneId": {
            "$ref": "#/components/schemas/timezoneId"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "membership": {
        "type": "object",
        "properties": {
          "companyRef": {
            "format": "uuid",
            "type": "string"
          },
          "companyRole": {
            "type": "string",
            "enum": [
              "manager",
              "member"
            ]
          },
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "credits": {
            "type": "object",
            "properties": {
              "expiring": {
                "type": "number"
              },
              "permanent": {
                "type": "number"
              }
            }
          },
          "dayPasses": {
            "type": "object",
            "properties": {
              "expiring": {
                "type": "number"
              }
            }
          },
          "deleteDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "invitationDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "locationRef": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/metadata"
          },
          "notes": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "member",
              "admin"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "requested",
              "approved"
            ]
          },
          "subscriptionRef": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "member",
              "nonmember"
            ]
          },
          "user": {
            "$ref": "#/components/schemas/user"
          },
          "userRef": {
            "format": "uuid",
            "type": "string"
          }
        }
      },
      "network": {
        "type": "object",
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "order": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "createDate": {
            "type": "string",
            "format": "date-time"
          },
          "deleteDate": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "locationRef": {
            "type": "string",
            "format": "uuid"
          },
          "membershipRef": {
            "type": "string",
            "format": "uuid"
          },
          "number": {
            "type": "number"
          },
          "option": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "title": {
                "type": "string"
              }
            }
          },
          "payment": {
            "$ref": "#/components/schemas/payment"
          },
          "product": {
            "type": "object",
            "properties": {
              "createDate": {
                "type": "string",
                "format": "date-time"
              },
              "description": {
                "type": "string"
              },
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "media": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    }
                  }
                }
              },
              "title": {
                "type": "string"
              }
            }
          },
          "quantity": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "new",
              "inProgress",
              "completed",
              "canceled"
            ]
          },
          "user": {
            "$ref": "#/components/schemas/user"
          }
        }
      },
      "plan": {
        "type": "object",
        "properties": {
          "access": {
            "type": "object",
            "properties": {
              "brivoGroupRef": {
                "type": "string",
                "format": "uuid"
              },
              "kisiGroupRef": {
                "type": "string",
                "format": "uuid"
              },
              "saltoksAccessGroupRef": {
                "type": "string",
                "format": "uuid"
              },
              "tapkeyGroupRef": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "credits": {
            "type": "number"
          },
          "customTax": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "rate": {
                "type": "number"
              }
            }
          },
          "dayPasses": {
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "discounts": {
            "type": "object",
            "properties": {
              "creditPackages": {
                "type": "number"
              },
              "desks": {
                "type": "number"
              },
              "events": {
                "type": "number"
              },
              "rooms": {
                "type": "number"
              },
              "shop": {
                "type": "number"
              }
            }
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "locationRef": {
            "type": "string",
            "format": "uuid"
          },
          "period": {
            "type": "string",
            "enum": [
              "day",
              "week",
              "month",
              "threeMonths",
              "sixMonths",
              "year"
            ]
          },
          "price": {
            "type": "number"
          },
          "printing": {
            "type": "object",
            "properties": {
              "ezeepBlueGroupRef": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "selfSignup": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "type": {
                "type": "string",
                "enum": [
                  "immediate"
                ]
              }
            }
          },
          "title": {
            "type": "string"
          }
        }
      },
      "shopCategory": {
        "type": "object",
        "properties": {
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "locationRef": {
            "type": "string",
            "format": "uuid"
          },
          "networkRef": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "product": {
        "type": "object",
        "properties": {
          "categoryRef": {
            "format": "uuid",
            "type": "string"
          },
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "description": {
            "type": "string"
          },
          "featured": {
            "type": "boolean"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "imageUrl": {
            "format": "uri",
            "type": "string"
          },
          "locationRef": {
            "format": "uuid",
            "type": "string"
          },
          "media": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "url": {
                  "format": "uri",
                  "type": "string"
                }
              }
            }
          },
          "options": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "available": {
                  "type": "boolean"
                },
                "createDate": {
                  "$ref": "#/components/schemas/dateSchema"
                },
                "customTax": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean"
                    },
                    "rate": {
                      "type": "number"
                    }
                  }
                },
                "description": {
                  "type": "string"
                },
                "id": {
                  "format": "uuid",
                  "type": "string"
                },
                "price": {
                  "type": "object",
                  "properties": {
                    "credits": {
                      "type": "object",
                      "properties": {
                        "amount": {
                          "type": "number"
                        },
                        "enabled": {
                          "type": "boolean"
                        }
                      }
                    },
                    "money": {
                      "type": "object",
                      "properties": {
                        "amount": {
                          "type": "number"
                        },
                        "currencyCode": {
                          "type": "string"
                        },
                        "enabled": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "stock": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean"
                    },
                    "quantity": {
                      "type": "number"
                    }
                  }
                },
                "title": {
                  "type": "string"
                }
              }
            }
          },
          "order": {
            "type": "object",
            "properties": {
              "confirmationEmail": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  },
                  "template": {
                    "type": "string"
                  }
                }
              },
              "enabled": {
                "type": "boolean"
              }
            }
          },
          "refundPolicy": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "updateDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "visibility": {
            "type": "string"
          }
        }
      },
      "registration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "privacyConsentDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "termsConsentDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "user": {
            "$ref": "#/components/schemas/user"
          }
        }
      },
      "resource": {
        "type": "object",
        "properties": {
          "autoRelease": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "interval": {
                "type": "string"
              }
            }
          },
          "bookingPermission": {
            "type": "string"
          },
          "bookingStepMinutes": {
            "type": "integer"
          },
          "capacity": {
            "type": "integer"
          },
          "capacityUnassigned": {
            "type": "integer"
          },
          "checkIn": {
            "type": "object",
            "properties": {
              "interval": {
                "type": "string"
              }
            }
          },
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "credits": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "tiers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "flatAmount": {
                      "type": "number"
                    },
                    "from": {
                      "type": "integer"
                    },
                    "unitAmount": {
                      "type": "number"
                    },
                    "upTo": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "dayPassesEnabled": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "imageUrl": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "locationRef": {
            "format": "uuid",
            "type": "string"
          },
          "money": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "tiers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "flatAmount": {
                      "type": "number"
                    },
                    "from": {
                      "type": "integer"
                    },
                    "unitAmount": {
                      "type": "number"
                    },
                    "upTo": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "networkRef": {
            "format": "uuid",
            "type": "string"
          },
          "refundThreshold": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "visibilityType": {
            "type": "string"
          }
        }
      },
      "subscription": {
        "type": "object",
        "properties": {
          "company": {
            "$ref": "#/components/schemas/company"
          },
          "companyRef": {
            "type": "string",
            "format": "uuid"
          },
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "credits": {
            "type": "number"
          },
          "currentInterval": {
            "type": "object",
            "properties": {
              "endDate": {
                "$ref": "#/components/schemas/dateSchema"
              },
              "startDate": {
                "$ref": "#/components/schemas/dateSchema"
              }
            }
          },
          "dayPasses": {
            "type": "integer"
          },
          "deleteDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "endDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "credits": {
                  "type": "number"
                },
                "customTax": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean"
                    },
                    "rate": {
                      "type": "number"
                    }
                  }
                },
                "dayPasses": {
                  "type": "integer"
                },
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "plan": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "price": {
                  "type": "number"
                },
                "quantity": {
                  "type": "integer"
                },
                "title": {
                  "type": "string"
                }
              }
            }
          },
          "locationRef": {
            "type": "string",
            "format": "uuid"
          },
          "membershipRef": {
            "type": "string",
            "format": "uuid"
          },
          "nextInterval": {
            "type": "object",
            "properties": {
              "startDate": {
                "$ref": "#/components/schemas/dateSchema"
              }
            }
          },
          "payWithInvoice": {
            "type": "object",
            "properties": {
              "creditPackages": {
                "type": "boolean"
              },
              "desks": {
                "type": "boolean"
              },
              "events": {
                "type": "boolean"
              },
              "rooms": {
                "type": "boolean"
              },
              "shop": {
                "type": "boolean"
              }
            }
          },
          "period": {
            "type": "string",
            "enum": [
              "day",
              "week",
              "month",
              "threeMonths",
              "sixMonths",
              "year"
            ]
          },
          "price": {
            "type": "number"
          },
          "startDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "timezoneId": {
            "$ref": "#/components/schemas/timezoneId"
          },
          "user": {
            "$ref": "#/components/schemas/user"
          },
          "userCreator": {
            "$ref": "#/components/schemas/user"
          }
        }
      },
      "ticket": {
        "type": "object",
        "properties": {
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "locationRef": {
            "format": "uuid",
            "type": "string"
          },
          "membershipAssignee": {
            "type": "object",
            "properties": {
              "id": {
                "format": "uuid",
                "type": "string"
              },
              "roleType": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "user": {
                "type": "object",
                "properties": {
                  "blocked": {
                    "type": "boolean"
                  },
                  "email": {
                    "type": "string"
                  },
                  "id": {
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string"
                  },
                  "surname": {
                    "type": "string"
                  },
                  "phoneNumber": {
                    "type": "string"
                  },
                  "photoUrl": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "membershipRequester": {
            "type": "object",
            "properties": {
              "id": {
                "format": "uuid",
                "type": "string"
              },
              "roleType": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "user": {
                "type": "object",
                "properties": {
                  "blocked": {
                    "type": "boolean"
                  },
                  "email": {
                    "type": "string"
                  },
                  "id": {
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string"
                  },
                  "surname": {
                    "type": "string"
                  },
                  "phoneNumber": {
                    "type": "string"
                  },
                  "photoUrl": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "membershipRefAssignee": {
            "type": "string",
            "format": "uuid"
          },
          "membershipRefRequester": {
            "type": "string",
            "format": "uuid"
          },
          "number": {
            "type": "integer",
            "format": "int64",
            "description": "Unique identifier of ticket in location."
          },
          "status": {
            "type": "string",
            "enum": [
              "new",
              "inProgress",
              "solved",
              "closed"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "access",
              "accountAndBilling",
              "bookings",
              "cleaning",
              "discriminationAndHarassment",
              "internet",
              "mailAndPackages",
              "noiseAndAcoustics",
              "other",
              "printing",
              "repairAndMaintenance",
              "temperatureAndVentilation",
              "websiteAndApp"
            ]
          },
          "updateDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "userAssignee": {
            "$ref": "#/components/schemas/user"
          },
          "userRequester": {
            "$ref": "#/components/schemas/user"
          }
        }
      },
      "ticketActivity": {
        "type": "object",
        "properties": {
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "membership": {
            "type": "object",
            "properties": {
              "id": {
                "format": "uuid",
                "type": "string"
              },
              "roleType": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "user": {
                "type": "object",
                "properties": {
                  "blocked": {
                    "type": "boolean"
                  },
                  "email": {
                    "type": "string"
                  },
                  "id": {
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string"
                  },
                  "phoneNumber": {
                    "type": "string"
                  },
                  "photoUrl": {
                    "type": "string"
                  },
                  "surname": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "ticketRef": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "comment",
              "statusUpdated",
              "typeUpdated",
              "assigneeUpdated"
            ]
          },
          "data": {
            "type": "object",
            "properties": {
              "attachments": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string"
                    }
                  }
                }
              },
              "text": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "membershipAssignee": {
                "type": "object",
                "properties": {
                  "id": {
                    "format": "uuid"
                  },
                  "roleType": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "user": {
                    "type": "object",
                    "properties": {
                      "blocked": {
                        "type": "boolean"
                      },
                      "email": {
                        "type": "string"
                      },
                      "id": {
                        "format": "uuid"
                      },
                      "name": {
                        "type": "string"
                      },
                      "phoneNumber": {
                        "type": "string"
                      },
                      "photoUrl": {
                        "type": "string"
                      },
                      "surname": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "previousAttributes": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string"
                  },
                  "membershipAssignee": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "format": "uuid"
                      },
                      "roleType": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "user": {
                        "type": "object",
                        "properties": {
                          "blocked": {
                            "type": "boolean"
                          },
                          "email": {
                            "type": "string"
                          },
                          "id": {
                            "format": "uuid"
                          },
                          "name": {
                            "type": "string"
                          },
                          "phoneNumber": {
                            "type": "string"
                          },
                          "photoUrl": {
                            "type": "string"
                          },
                          "surname": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "transactionCreditsExpanded": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "booking": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "resource": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "title": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "company": {
            "$ref": "#/components/schemas/company"
          },
          "companyRef": {
            "type": "string",
            "format": "uuid"
          },
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "expiringAmount": {
            "type": "number"
          },
          "locationRef": {
            "type": "string",
            "format": "uuid"
          },
          "membershipRefCreator": {
            "type": "string",
            "format": "uuid"
          },
          "membershipRef": {
            "type": "string",
            "format": "uuid"
          },
          "order": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "option": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              },
              "product": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "title": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "permanentAmount": {
            "type": "number"
          },
          "refund": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number"
              },
              "createDate": {
                "$ref": "#/components/schemas/dateSchema"
              }
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "canceled",
              "failed",
              "succeeded"
            ]
          },
          "ticket": {
            "type": "object",
            "properties": {
              "createDate": {
                "$ref": "#/components/schemas/dateSchema"
              },
              "event": {
                "type": "object",
                "properties": {
                  "endDate": {
                    "$ref": "#/components/schemas/dateSchema"
                  },
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "startDate": {
                    "$ref": "#/components/schemas/dateSchema"
                  },
                  "title": {
                    "type": "string"
                  }
                }
              },
              "id": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "booking",
              "chargeExpiringCredits",
              "chargePermanentCredits",
              "creditPackage",
              "eventTicket",
              "order",
              "refund",
              "subscriptionExpiration",
              "subscriptionRenewal",
              "transferExpiringCredits",
              "transferPermanentCredits"
            ]
          },
          "userCreator": {
            "$ref": "#/components/schemas/user"
          },
          "userOwner": {
            "$ref": "#/components/schemas/user"
          },
          "userRefCreator": {
            "type": "string",
            "format": "uuid"
          },
          "userRefOwner": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "transactionCredits": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "company": {
            "$ref": "#/components/schemas/company"
          },
          "companyRef": {
            "type": "string",
            "format": "uuid"
          },
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "locationRef": {
            "type": "string",
            "format": "uuid"
          },
          "membershipRef": {
            "type": "string",
            "format": "uuid"
          },
          "membershipRefCreator": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": [
              "canceled",
              "failed",
              "succeeded"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "chargeExpiringCredits",
              "chargePermanentCredits",
              "transferExpiringCredits",
              "transferPermanentCredits"
            ]
          },
          "userCreator": {
            "$ref": "#/components/schemas/user"
          },
          "userOwner": {
            "$ref": "#/components/schemas/user"
          },
          "userRef": {
            "type": "string",
            "format": "uuid"
          },
          "userRefCreator": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "transactionDayPassesExpanded": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "booking": {
            "type": "object",
            "properties": {
              "id": {
                "format": "uuid",
                "type": "string"
              },
              "resource": {
                "type": "object",
                "properties": {
                  "id": {
                    "format": "uuid",
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "company": {
            "$ref": "#/components/schemas/company"
          },
          "companyRef": {
            "format": "uuid",
            "type": "string"
          },
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "locationRef": {
            "format": "uuid",
            "type": "string"
          },
          "membershipRefCreator": {
            "format": "uuid",
            "type": "string"
          },
          "membershipRefOwner": {
            "format": "uuid",
            "type": "string"
          },
          "refund": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number"
              },
              "createDate": {
                "$ref": "#/components/schemas/dateSchema"
              }
            }
          },
          "type": {
            "enum": [
              "booking",
              "chargeExpiringDayPasses",
              "refund",
              "subscriptionExpiration",
              "subscriptionRenewal",
              "transferExpiringDayPasses"
            ],
            "type": "string"
          },
          "userCreator": {
            "$ref": "#/components/schemas/user"
          },
          "userOwner": {
            "$ref": "#/components/schemas/user"
          },
          "userRefCreator": {
            "format": "uuid",
            "type": "string"
          },
          "userRefOwner": {
            "format": "uuid",
            "type": "string"
          }
        }
      },
      "transactionDayPasses": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "company": {
            "$ref": "#/components/schemas/company"
          },
          "companyRef": {
            "type": "string",
            "format": "uuid"
          },
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "locationRef": {
            "type": "string",
            "format": "uuid"
          },
          "membershipRef": {
            "type": "string",
            "format": "uuid"
          },
          "membershipRefCreator": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": [
              "chargeExpiringDayPasses",
              "transferExpiringDayPasses"
            ]
          },
          "user": {
            "$ref": "#/components/schemas/user"
          },
          "userRef": {
            "type": "string",
            "format": "uuid"
          },
          "userRefCreator": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "transaction": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "booking": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "resource": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "title": {
                    "type": "string"
                  }
                }
              },
              "price": {
                "type": "object",
                "properties": {
                  "netAmount": {
                    "type": "number"
                  },
                  "taxAmount": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "company": {
            "$ref": "#/components/schemas/company"
          },
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "creditPackage": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number"
              },
              "price": {
                "type": "object",
                "properties": {
                  "netAmount": {
                    "type": "number"
                  },
                  "taxAmount": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "currencyCode": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "invoice": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "title": {
                "type": "string"
              }
            }
          },
          "locationRef": {
            "type": "string",
            "format": "uuid"
          },
          "membershipRef": {
            "type": "string",
            "format": "uuid"
          },
          "order": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "option": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              },
              "price": {
                "type": "object",
                "properties": {
                  "netAmount": {
                    "type": "number"
                  },
                  "taxAmount": {
                    "type": "number"
                  }
                }
              },
              "product": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "title": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "paymentMethod": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "external",
                  "flow",
                  "fondy",
                  "freedompay",
                  "kakaopay",
                  "mercadopago",
                  "paypal",
                  "paystack",
                  "plata",
                  "stripe",
                  "tap",
                  "wayforpay"
                ]
              }
            }
          },
          "plan": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "title": {
                "type": "string"
              }
            }
          },
          "refund": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "number"
              },
              "createDate": {
                "$ref": "#/components/schemas/dateSchema"
              }
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "canceled",
              "failed",
              "pending",
              "processing",
              "succeeded"
            ]
          },
          "ticket": {
            "type": "object",
            "properties": {
              "createDate": {
                "$ref": "#/components/schemas/dateSchema"
              },
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "event": {
                "type": "object",
                "properties": {
                  "endDate": {
                    "$ref": "#/components/schemas/dateSchema"
                  },
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "startDate": {
                    "$ref": "#/components/schemas/dateSchema"
                  },
                  "title": {
                    "type": "string"
                  }
                }
              },
              "price": {
                "type": "object",
                "properties": {
                  "netAmount": {
                    "type": "number"
                  },
                  "taxAmount": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "type": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/user"
          }
        }
      },
      "visitRequest": {
        "type": "object",
        "properties": {
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "locationRef": {
            "format": "uuid",
            "type": "string"
          },
          "userHost": {
            "$ref": "#/components/schemas/user"
          },
          "userRefHost": {
            "format": "uuid",
            "type": "string"
          },
          "userRefVisitor": {
            "format": "uuid",
            "type": "string"
          },
          "visitor": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "phoneNumber": {
                "type": "string"
              },
              "surname": {
                "type": "string"
              }
            }
          }
        }
      },
      "visit": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "102288"
          },
          "comment": {
            "type": "string"
          },
          "checkInDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "checkOutDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "createDate": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "date": {
            "$ref": "#/components/schemas/dateSchema"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "location": {
            "type": "object",
            "properties": {
              "address": {
                "type": "string"
              },
              "id": {
                "format": "uuid",
                "type": "string"
              },
              "timezoneId": {
                "$ref": "#/components/schemas/timezoneId"
              },
              "title": {
                "type": "string"
              }
            }
          },
          "locationRef": {
            "format": "uuid",
            "type": "string"
          },
          "userHost": {
            "$ref": "#/components/schemas/user"
          },
          "userRefHost": {
            "format": "uuid",
            "type": "string"
          },
          "userRefVisitor": {
            "format": "uuid",
            "type": "string"
          },
          "visitor": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "phoneNumber": {
                "type": "string"
              },
              "surname": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "requestBodies": {
      "applyBenefit": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "application": {
                  "type": "object",
                  "properties": {
                    "benefitId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "comment": {
                      "type": "string",
                      "description": "The comment of the application"
                    }
                  },
                  "required": [
                    "benefitId"
                  ]
                }
              }
            }
          }
        }
      },
      "createBenefitCategory": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "description": "The title of the benefit category"
                    },
                    "locationRef": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The id of the location where to create a benefit category."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "updateBenefitCategory": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "description": "The title of the benefit category"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "createBenefit": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "benefit": {
                  "type": "object",
                  "properties": {
                    "application": {
                      "type": "object",
                      "properties": {
                        "confirmationEmail": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "boolean"
                            },
                            "template": {
                              "type": "string"
                            }
                          }
                        },
                        "allowance": {
                          "type": "string",
                          "enum": [
                            "once",
                            "unlimited"
                          ]
                        },
                        "enabled": {
                          "type": "boolean"
                        },
                        "buttonLabel": {
                          "type": "string",
                          "enum": [
                            "apply",
                            "buy",
                            "contact",
                            "get",
                            "learnMore"
                          ]
                        }
                      }
                    },
                    "categoryRef": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The id of the category."
                    },
                    "description": {
                      "type": "string"
                    },
                    "featured": {
                      "type": "boolean"
                    },
                    "locationRef": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The id of the location."
                    },
                    "media": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "subtitle": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    },
                    "visibility": {
                      "type": "string",
                      "enum": [
                        "public",
                        "admins",
                        "members",
                        "networkMembers"
                      ]
                    }
                  },
                  "required": [
                    "categoryRef",
                    "locationRef",
                    "title",
                    "visibility"
                  ]
                }
              },
              "required": [
                "benefit"
              ]
            }
          }
        }
      },
      "updateBenefit": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "benefit": {
                  "type": "object",
                  "properties": {
                    "application": {
                      "type": "object",
                      "properties": {
                        "confirmationEmail": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "boolean"
                            },
                            "template": {
                              "type": "string"
                            }
                          }
                        },
                        "allowance": {
                          "type": "string",
                          "enum": [
                            "once",
                            "unlimited"
                          ]
                        },
                        "enabled": {
                          "type": "boolean"
                        },
                        "buttonLabel": {
                          "type": "string",
                          "enum": [
                            "apply",
                            "buy",
                            "contact",
                            "get",
                            "learnMore"
                          ]
                        }
                      }
                    },
                    "categoryRef": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The id of the category."
                    },
                    "description": {
                      "type": "string"
                    },
                    "featured": {
                      "type": "boolean"
                    },
                    "media": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "subtitle": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    },
                    "visibility": {
                      "type": "string",
                      "enum": [
                        "public",
                        "admins",
                        "members",
                        "networkMembers"
                      ]
                    }
                  }
                }
              },
              "required": [
                "benefit"
              ]
            }
          }
        }
      },
      "createBooking": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "booking": {
                  "type": "object",
                  "properties": {
                    "endDate": {
                      "$ref": "#/components/schemas/dateSchema"
                    },
                    "memo": {
                      "type": "string"
                    },
                    "resourceRef": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The Resource id where to create a booking."
                    },
                    "startDate": {
                      "$ref": "#/components/schemas/dateSchema"
                    },
                    "title": {
                      "type": "string"
                    },
                    "membershipRefOwner": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The id of membership owner."
                    }
                  },
                  "required": [
                    "endDate",
                    "startDate",
                    "resourceRef"
                  ]
                }
              },
              "required": [
                "booking"
              ]
            }
          }
        }
      },
      "createCompany": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "company": {
                  "type": "object",
                  "properties": {
                    "billingAddress": {
                      "type": "string",
                      "description": "The billing address of company to create."
                    },
                    "businessAddress": {
                      "type": "object",
                      "properties": {
                        "city": {
                          "type": "string",
                          "description": "The city of company to create."
                        },
                        "countryCode": {
                          "type": "string",
                          "description": "The country code of company to create."
                        },
                        "line1": {
                          "type": "string",
                          "description": "The line 1 of company to create."
                        },
                        "line2": {
                          "type": "string",
                          "description": "The line 2 of company to create."
                        },
                        "postalCode": {
                          "type": "string",
                          "description": "The postal code of company to create."
                        },
                        "state": {
                          "type": "string",
                          "description": "The state of company to create."
                        }
                      }
                    },
                    "legalName": {
                      "type": "string",
                      "description": "The legal name of company to create."
                    },
                    "locationRef": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The location id where to create a company."
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/metadata"
                    },
                    "notes": {
                      "type": "string",
                      "description": "The notes of company to create."
                    },
                    "taxId": {
                      "type": "string",
                      "description": "The tax id of company to create."
                    },
                    "title": {
                      "type": "string",
                      "description": "The title of company to create."
                    }
                  },
                  "required": [
                    "locationRef",
                    "title"
                  ]
                }
              },
              "required": [
                "company"
              ]
            }
          }
        }
      },
      "createEvent": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "event": {
                  "type": "object",
                  "properties": {
                    "applicationType": {
                      "type": "string",
                      "enum": [
                        "purchase",
                        "none"
                      ]
                    },
                    "endDate": {
                      "$ref": "#/components/schemas/dateSchema"
                    },
                    "limitedAttendees": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        },
                        "limit": {
                          "type": "number",
                          "minimum": 0
                        }
                      }
                    },
                    "locationRef": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "price": {
                      "type": "object",
                      "properties": {
                        "credits": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "boolean"
                            },
                            "amount": {
                              "type": "number",
                              "minimum": 0
                            }
                          }
                        },
                        "money": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "boolean"
                            },
                            "amount": {
                              "type": "number",
                              "minimum": 0
                            }
                          }
                        }
                      }
                    },
                    "refundThreshold": {
                      "type": "string",
                      "enum": [
                        "noRefund",
                        "fifteenMinutes",
                        "thirtyMinutes",
                        "oneHour",
                        "twoHours",
                        "fourHours",
                        "sixHours",
                        "twelveHours",
                        "oneDay",
                        "twoDays",
                        "oneWeek",
                        "twoWeeks",
                        "fourWeeks"
                      ]
                    },
                    "startDate": {
                      "$ref": "#/components/schemas/dateSchema"
                    },
                    "title": {
                      "type": "string",
                      "minLength": 1
                    },
                    "venue": {
                      "type": "string"
                    },
                    "visibilityType": {
                      "type": "string",
                      "enum": [
                        "public",
                        "admins",
                        "networkMembers",
                        "members"
                      ]
                    }
                  },
                  "required": [
                    "endDate",
                    "startDate",
                    "locationRef",
                    "title"
                  ]
                }
              },
              "required": [
                "event"
              ]
            }
          }
        }
      },
      "createFeedPostComment": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "comment": {
                  "type": "object",
                  "properties": {
                    "parentCommentRef": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The ID of the parent comment. If the comment is a reply, this will be the ID of the parent comment. If the comment is a top-level comment, this property won't be present."
                    },
                    "postRef": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The ID of the post"
                    },
                    "text": {
                      "type": "string",
                      "description": "The text of the comment"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "comment"
                      ],
                      "description": "The type of the comment"
                    }
                  },
                  "required": [
                    "text",
                    "type",
                    "postRef"
                  ]
                }
              },
              "required": [
                "comment"
              ]
            }
          }
        }
      },
      "createFeedPost": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "post": {
                  "type": "object",
                  "properties": {
                    "locationRef": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The location id where to create a feed post."
                    },
                    "text": {
                      "type": "string",
                      "description": "The text of feed post to create."
                    }
                  },
                  "required": [
                    "locationRef",
                    "text"
                  ]
                }
              },
              "required": [
                "activity"
              ]
            }
          }
        }
      },
      "updateFeedPost": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "post": {
                  "type": "object",
                  "properties": {
                    "media": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "format": "uuid"
                          }
                        }
                      }
                    },
                    "text": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "createInvoice": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "invoice": {
                  "type": "object",
                  "properties": {
                    "companyRef": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "membershipRef": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                }
              },
              "required": [
                "invoice"
              ]
            }
          }
        }
      },
      "payInvoice": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "paymentMethod": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "external"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ]
                }
              },
              "required": [
                "paymentMethod"
              ]
            }
          }
        }
      },
      "createInvoiceItem": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "invoiceItem": {
                  "type": "object",
                  "properties": {
                    "unitAmount": {
                      "type": "number",
                      "description": "Amount of invoice item without taxes."
                    },
                    "invoiceRef": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The Invoice id where item is created."
                    },
                    "description": {
                      "type": "string"
                    },
                    "quantity": {
                      "type": "number",
                      "format": "integer"
                    },
                    "tax": {
                      "type": "object",
                      "properties": {
                        "rate": {
                          "type": "number",
                          "description": "Tax rate. If not defined, tax rate will be applied based on locations's configuration."
                        }
                      },
                      "description": "Tax information for the item."
                    }
                  },
                  "required": [
                    "unitAmount",
                    "invoiceRef",
                    "description",
                    "type"
                  ]
                }
              },
              "required": [
                "invoiceItem"
              ]
            }
          }
        }
      },
      "createMembership": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "membership": {
                  "type": "object",
                  "properties": {
                    "companyRef": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "companyRole": {
                      "type": "string",
                      "enum": [
                        "manager",
                        "member"
                      ]
                    },
                    "role": {
                      "type": "string",
                      "enum": [
                        "admin",
                        "member"
                      ]
                    },
                    "metadata": {
                      "$ref": "#/components/schemas/metadata"
                    },
                    "notes": {
                      "type": "string"
                    },
                    "locationRef": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The location id where to create a membership."
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "member",
                        "nonmember"
                      ],
                      "description": "The type of membership. Default value is member."
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "format": "email",
                          "description": "An invitation letter will be sent to the given email."
                        },
                        "about": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "phoneNumber": {
                          "type": "string"
                        },
                        "surname": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "email",
                        "name"
                      ]
                    }
                  },
                  "required": [
                    "role",
                    "locationRef",
                    "user"
                  ]
                },
                "locale": {
                  "type": "string"
                }
              },
              "required": [
                "membership"
              ]
            }
          }
        }
      },
      "createPlan": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "plan": {
                  "type": "object",
                  "properties": {
                    "access": {
                      "type": "object",
                      "properties": {
                        "brivoGroupRef": {
                          "type": "number"
                        },
                        "kisiGroupRef": {
                          "type": "number"
                        },
                        "saltoksAccessGroupRef": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "tapkeyGroupRef": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "credits": {
                      "type": "number"
                    },
                    "customTax": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        },
                        "rate": {
                          "type": "number"
                        }
                      }
                    },
                    "dayPasses": {
                      "type": "number"
                    },
                    "description": {
                      "type": "string"
                    },
                    "discounts": {
                      "type": "object",
                      "properties": {
                        "creditPackages": {
                          "type": "number"
                        },
                        "desks": {
                          "type": "number"
                        },
                        "events": {
                          "type": "number"
                        },
                        "rooms": {
                          "type": "number"
                        },
                        "shop": {
                          "type": "number"
                        }
                      }
                    },
                    "locationRef": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "period": {
                      "type": "string",
                      "enum": [
                        "day",
                        "week",
                        "month",
                        "threeMonths",
                        "sixMonths",
                        "year"
                      ]
                    },
                    "price": {
                      "type": "number"
                    },
                    "printing": {
                      "type": "object",
                      "properties": {
                        "ezeepBlueGroupRef": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "selfSignup": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "immediate",
                            "request"
                          ]
                        }
                      }
                    },
                    "title": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "locationRef",
                    "period",
                    "price",
                    "title"
                  ]
                }
              }
            }
          }
        }
      },
      "updatePlan": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "plan": {
                  "type": "object",
                  "properties": {
                    "access": {
                      "type": "object",
                      "properties": {
                        "brivoGroupRef": {
                          "type": "number"
                        },
                        "kisiGroupRef": {
                          "type": "number"
                        },
                        "saltoksAccessGroupRef": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "tapkeyGroupRef": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "credits": {
                      "type": "number"
                    },
                    "customTax": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        },
                        "rate": {
                          "type": "number"
                        }
                      }
                    },
                    "dayPasses": {
                      "type": "number"
                    },
                    "description": {
                      "type": "string"
                    },
                    "discounts": {
                      "type": "object",
                      "properties": {
                        "creditPackages": {
                          "type": "number"
                        },
                        "desks": {
                          "type": "number"
                        },
                        "events": {
                          "type": "number"
                        },
                        "rooms": {
                          "type": "number"
                        },
                        "shop": {
                          "type": "number"
                        }
                      }
                    },
                    "price": {
                      "type": "number"
                    },
                    "printing": {
                      "type": "object",
                      "properties": {
                        "ezeepBlueGroupRef": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    },
                    "selfSignup": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "immediate",
                            "request"
                          ]
                        }
                      }
                    },
                    "title": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "createShopCategory": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "description": "The title of the shop category"
                    },
                    "locationRef": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The id of the location where to create a shop category."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "updateShopCategory": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string",
                      "description": "The title of the shop category"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "createProduct": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "product": {
                  "type": "object",
                  "properties": {
                    "categoryRef": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "description": {
                      "type": "string"
                    },
                    "featured": {
                      "type": "boolean"
                    },
                    "locationRef": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "title": {
                      "type": "string"
                    },
                    "media": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "url": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "visibility": {
                      "type": "string"
                    },
                    "order": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        },
                        "confirmationEmail": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "boolean"
                            },
                            "template": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "refundPolicy": {
                      "type": "string",
                      "enum": [
                        "noRefund",
                        "statusNew"
                      ]
                    },
                    "options": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "customTax": {
                            "type": "object",
                            "properties": {
                              "enabled": {
                                "type": "boolean"
                              },
                              "rate": {
                                "type": "number"
                              }
                            }
                          },
                          "description": {
                            "type": "string"
                          },
                          "available": {
                            "type": "boolean"
                          },
                          "price": {
                            "type": "object",
                            "properties": {
                              "credits": {
                                "type": "object",
                                "properties": {
                                  "amount": {
                                    "type": "number"
                                  },
                                  "enabled": {
                                    "type": "boolean"
                                  }
                                }
                              },
                              "money": {
                                "type": "object",
                                "properties": {
                                  "amount": {
                                    "type": "number"
                                  },
                                  "enabled": {
                                    "type": "boolean"
                                  }
                                }
                              }
                            }
                          },
                          "title": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "title",
                          "available",
                          "price"
                        ]
                      }
                    }
                  },
                  "required": [
                    "options",
                    "title",
                    "categoryRef",
                    "locationRef"
                  ]
                }
              },
              "required": [
                "product"
              ]
            }
          }
        }
      },
      "updateProduct": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "product": {
                  "type": "object",
                  "properties": {
                    "categoryRef": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "description": {
                      "type": "string"
                    },
                    "featured": {
                      "type": "boolean"
                    },
                    "title": {
                      "type": "string"
                    },
                    "media": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "url": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "visibility": {
                      "type": "string"
                    },
                    "order": {
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean"
                        },
                        "confirmationEmail": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "boolean"
                            },
                            "template": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "refundPolicy": {
                      "type": "string",
                      "enum": [
                        "noRefund",
                        "statusNew"
                      ]
                    },
                    "options": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "customTax": {
                            "type": "object",
                            "properties": {
                              "enabled": {
                                "type": "boolean"
                              },
                              "rate": {
                                "type": "number"
                              }
                            }
                          },
                          "description": {
                            "type": "string"
                          },
                          "available": {
                            "type": "boolean"
                          },
                          "price": {
                            "type": "object",
                            "properties": {
                              "credits": {
                                "type": "object",
                                "properties": {
                                  "amount": {
                                    "type": "number"
                                  },
                                  "enabled": {
                                    "type": "boolean"
                                  }
                                }
                              },
                              "money": {
                                "type": "object",
                                "properties": {
                                  "amount": {
                                    "type": "number"
                                  },
                                  "enabled": {
                                    "type": "boolean"
                                  }
                                }
                              }
                            }
                          },
                          "title": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "title",
                          "available",
                          "price"
                        ]
                      }
                    }
                  },
                  "required": [
                    "options",
                    "title",
                    "categoryRef"
                  ]
                }
              },
              "required": [
                "product"
              ]
            }
          }
        }
      },
      "patchResource": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "resource": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "assignSubscription": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "subscription": {
                  "type": "object",
                  "properties": {
                    "companyRef": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "membershipRef": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "period": {
                      "type": "string",
                      "enum": [
                        "day",
                        "week",
                        "month",
                        "threeMonths",
                        "sixMonths",
                        "year"
                      ]
                    },
                    "startDate": {
                      "$ref": "#/components/schemas/dateSchema"
                    },
                    "endDate": {
                      "$ref": "#/components/schemas/dateSchema"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "credits": {
                            "type": "number"
                          },
                          "day_passes": {
                            "type": "number"
                          },
                          "price": {
                            "type": "number"
                          },
                          "quantity": {
                            "type": "number"
                          },
                          "customTax": {
                            "type": "object",
                            "properties": {
                              "enabled": {
                                "type": "boolean"
                              },
                              "rate": {
                                "type": "number"
                              }
                            }
                          },
                          "title": {
                            "type": "string"
                          },
                          "plan": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "uuid"
                              }
                            }
                          }
                        }
                      }
                    },
                    "payWithInvoice": {
                      "type": "object",
                      "properties": {
                        "desks": {
                          "type": "boolean"
                        },
                        "events": {
                          "type": "boolean"
                        },
                        "rooms": {
                          "type": "boolean"
                        },
                        "shop": {
                          "type": "boolean"
                        },
                        "creditPackages": {
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "required": [
                    "period"
                  ],
                  "oneOf": [
                    {
                      "required": [
                        "companyRef"
                      ]
                    },
                    {
                      "required": [
                        "membershipRef"
                      ]
                    }
                  ]
                },
                "issueFirstInvoice": {
                  "type": "boolean",
                  "description": "If true, the first invoice will be issued."
                }
              },
              "required": [
                "subscription"
              ]
            }
          }
        }
      },
      "patchSubscription": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "subscription": {
                  "type": "object",
                  "properties": {
                    "endDate": {
                      "$ref": "#/components/schemas/dateSchema",
                      "nullable": true
                    }
                  }
                }
              },
              "required": [
                "subscription"
              ]
            }
          }
        }
      },
      "createSupportTicket": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "ticket": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "access",
                        "accountAndBilling",
                        "bookings",
                        "cleaning",
                        "discriminationAndHarassment",
                        "internet",
                        "mailAndPackages",
                        "noiseAndAcoustics",
                        "offensiveOrObjectionableContent",
                        "other",
                        "printing",
                        "repairAndMaintenance",
                        "temperatureAndVentilation",
                        "websiteAndApp"
                      ]
                    },
                    "userRefRequester": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The id of the user who is requesting the ticket."
                    },
                    "text": {
                      "type": "string",
                      "description": "The text of the ticket."
                    },
                    "locationRef": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The id of the location."
                    }
                  },
                  "required": [
                    "type",
                    "text",
                    "locationRef"
                  ]
                }
              }
            }
          }
        }
      },
      "createCreditsTransaction": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "transaction": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "type": "number"
                    },
                    "companyRef": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The company id to charge or transfer credits to."
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the transaction."
                    },
                    "locationRef": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The location id where to create a company."
                    },
                    "membershipRef": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The membership id to charge or transfer credits from."
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "chargeExpiringCredits",
                        "chargePermanentCredits",
                        "transferExpiringCredits",
                        "transferPermanentCredits"
                      ]
                    }
                  },
                  "required": [
                    "locationRef",
                    "amount",
                    "type"
                  ],
                  "oneOf": [
                    {
                      "required": [
                        "membershipRef"
                      ]
                    },
                    {
                      "required": [
                        "companyRef"
                      ]
                    }
                  ]
                }
              },
              "required": [
                "company"
              ]
            }
          }
        }
      },
      "createDayPassesTransaction": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "transaction": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "type": "number"
                    },
                    "companyRef": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The company id to charge or transfer day passes to."
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the transaction."
                    },
                    "locationRef": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The location id where to create a company."
                    },
                    "membershipRef": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The membership id to charge or transfer day passes from."
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "chargeExpiringDayPasses",
                        "transferExpiringDayPasses"
                      ]
                    }
                  },
                  "required": [
                    "locationRef",
                    "amount",
                    "type"
                  ],
                  "oneOf": [
                    {
                      "required": [
                        "membershipRef"
                      ]
                    },
                    {
                      "required": [
                        "companyRef"
                      ]
                    }
                  ]
                }
              },
              "required": [
                "transaction"
              ]
            }
          }
        }
      },
      "createVisitRequest": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "request": {
                  "type": "object",
                  "properties": {
                    "locationRef": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The id of the location."
                    },
                    "userRefHost": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The id of the user who is hosting the request."
                    },
                    "visitor": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "description": "Visitor email."
                        },
                        "name": {
                          "type": "string",
                          "description": "Visitor name."
                        },
                        "phoneNumber": {
                          "type": "string",
                          "description": "Visitor phone number."
                        },
                        "surname": {
                          "type": "string",
                          "description": "Visitor surname."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "createVisit": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "visit": {
                  "type": "object",
                  "properties": {
                    "comment": {
                      "type": "string"
                    },
                    "date": {
                      "$ref": "#/components/schemas/dateSchema"
                    },
                    "locationRef": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The location id where to create a visit."
                    },
                    "visitor": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "description": "Visitor name."
                        },
                        "name": {
                          "type": "string",
                          "description": "Visitor email."
                        },
                        "phoneNumber": {
                          "type": "string",
                          "description": "Visitor phone number."
                        },
                        "surname": {
                          "type": "string",
                          "description": "Visitor surname."
                        }
                      },
                      "required": [
                        "email",
                        "name"
                      ]
                    }
                  },
                  "required": [
                    "date",
                    "locationRef",
                    "visitor"
                  ]
                }
              },
              "required": [
                "visit"
              ]
            }
          }
        }
      },
      "checkInVisit": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "locationRef": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The id of the location."
                }
              }
            }
          }
        }
      },
      "updateVisit": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "visit": {
                  "type": "object",
                  "properties": {
                    "date": {
                      "$ref": "#/components/schemas/dateSchema"
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "visit"
              ]
            }
          }
        }
      }
    }
  }
}